<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>holysll</title>
  
  <subtitle>彼岸花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-12T14:53:16.684Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>holysll</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>README</title>
    <link href="http://yoursite.com/2020/05/14/README/"/>
    <id>http://yoursite.com/2020/05/14/README/</id>
    <published>2020-05-13T18:50:55.227Z</published>
    <updated>2020-05-12T14:53:16.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prepare-for-interview"><a href="#Prepare-for-interview" class="headerlink" title="Prepare_for_interview"></a>Prepare_for_interview</h1><p>knowledge review and learn more, remark some new thing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prepare-for-interview&quot;&gt;&lt;a href=&quot;#Prepare-for-interview&quot; class=&quot;headerlink&quot; title=&quot;Prepare_for_interview&quot;&gt;&lt;/a&gt;Prepare_for_interview&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo使用教程与常用命令</title>
    <link href="http://yoursite.com/2020/05/12/Hexo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/12/Hexo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-05-12T15:34:02.000Z</published>
    <updated>2020-05-12T16:37:29.045Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎使用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 更多信息可以查看<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a> 。如果你在使用过程中遇到任何问题，可以在这<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">提问</a> 或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a> 上留言，这篇文章简单介绍下Hexo的使用以及常用的命令。</p><a id="more"></a><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"文章标题"</span></span><br><span class="line">或者</span><br><span class="line">$ hexo n <span class="string">"文章标题"</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">或者</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">或者</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>更多信息:: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><h3 id="获取主题"><a href="#获取主题" class="headerlink" title="获取主题"></a>获取主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/holysll/hexo-theme-ayer</span><br></pre></td></tr></table></figure><h3 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">vi _config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: hexo-theme-ayer</span><br></pre></td></tr></table></figure><h3 id="清除缓存并部署"><a href="#清除缓存并部署" class="headerlink" title="清除缓存并部署"></a>清除缓存并部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎使用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! 更多信息可以查看&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo官方文档&lt;/a&gt; 。如果你在使用过程中遇到任何问题，可以在这&lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;提问&lt;/a&gt; 或者在&lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; 上留言，这篇文章简单介绍下Hexo的使用以及常用的命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="个人博客" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Python语言知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/05/08/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T17:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对python语言基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#1-python语言的特性">1. Python语言的特性</a></li><li><a href="#2-python语言相比其他语言的优点和缺点">2. python语言相比其他语言的优点和缺点</a></li><li><a href="#3-python中的元类metaclass">3. python中的元类metaclass</a></li><li><a href="#4-staticmethod和classmethod和实例方法">4. @staticmethod和@classmethod和实例方法</a></li><li><a href="#5-单例模式">5. 单例模式</a></li><li><a href="#6-python常用库">6. python常用库</a></li><li><a href="#7-python中的类型转换">7. python中的类型转换</a></li><li><a href="#8-文件流操作">8. 文件流操作</a></li><li><a href="#9-__new__-和-__init__的区别">9. <strong>new</strong> 和 <strong>init</strong>的区别</a></li></ul><!-- /TOC --></div><h2 id="1-Python语言的特性"><a href="#1-Python语言的特性" class="headerlink" title="1. Python语言的特性"></a>1. Python语言的特性</h2><p>   Python是一种解释型语言，不需要再运行之前进行编译。<br>   Python是一种动态类型语言，不需要声明变量的类型。<br>   python适合面向对象编程，允许类的定义以及组合和继承。  </p><h2 id="2-python语言相比其他语言的优点和缺点"><a href="#2-python语言相比其他语言的优点和缺点" class="headerlink" title="2. python语言相比其他语言的优点和缺点"></a>2. python语言相比其他语言的优点和缺点</h2><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h2><ul><li>简单易懂，灵活简洁</li><li>强大的标准库和三方库</li><li>活跃的社区，许多开源项目</li><li>开发效率高，迭代便捷</li><li>应用领域广泛，Web开发、网络编程、自动化运维、Linux系统管理、数据分析、科学计算、人工智能、机器学习</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h2><ul><li>执行效率较差,</li><li>异步生态不完善，相关的库较少(tornado)</li><li>GIL的存在，无法充分利用多核的特性</li></ul><h2 id="3-python中的元类metaclass"><a href="#3-python中的元类metaclass" class="headerlink" title="3. python中的元类metaclass"></a>3. python中的元类metaclass</h2><blockquote><p>不会很常用，在ORM这种复杂结构中晦遇到，同时在看一些框架源代码的过程中可能会遇到很多元类的实例，看起来很晦涩。推荐<a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python" target="_blank" rel="noopener">Stack overflow</a> 一些专业解答，也可以参考下<a href="https://www.cnblogs.com/tkqasn/p/6524879.html" target="_blank" rel="noopener">这篇博客</a>的深刻理解，很详细。</p></blockquote><ul><li><strong>str是用来创建字符串对象的类</strong></li><li><strong>int是用来创建整数对象的类</strong></li><li><strong>type就是创建类对象的类</strong></li></ul><blockquote><p>通过type函数动态创建类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># type的语法</span></span><br><span class="line">type(class_name, class_parents, class_attr_dict)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    class_name: 类名</span></span><br><span class="line"><span class="string">    class_parents: 父类的元组(针对集成的情况，可为空)</span></span><br><span class="line"><span class="string">    class_attr_dict: 包函属性的字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    MyClass = type(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'foo'</span>:<span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>元类：就是能够创建python中类这种对象的东西，如type就是Python的内建元类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass = MetaClass()  <span class="comment"># 元类的创建</span></span><br><span class="line">my_class = MyClass()  <span class="comment"># 类的实例</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上Myclass就是通过type()来创建出的MyClass类，它是type()类的一个实例。<br>同时，MyClass本身也是累，也可以创建自己的实例my_class。</p></blockquote><ul><li><strong><strong>metaclass</strong></strong></li></ul><blockquote><p>可以再写一个类的时候为其添加<strong>metaclass</strong>属性，这样就定义了这个类的元类。<strong>metaclass</strong>实际上可以被任意调用，它并不需要是一个正式的类。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = something</span><br><span class="line"></span><br><span class="line"><span class="comment"># py3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=something)</span>:</span></span><br><span class="line">    __metaclass__ = something</span><br></pre></td></tr></table></figure><ul><li><strong>自定义元类</strong></li></ul><blockquote><p>元类的主要目的为了当创建类时能够自动改变类，通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。</p></blockquote><ul><li>可以使用函数当做元类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类通常会将你传给type的参数作为自己的参数传入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_attr</span><span class="params">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">    <span class="string">"""返回一个类对象，将属性都转为大写形式"""</span></span><br><span class="line">    <span class="comment"># 选择所有不以'__'开头的属性</span></span><br><span class="line">    attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</span><br><span class="line">    <span class="comment"># 将他们转化为大写形式</span></span><br><span class="line">    uppercase_attr = dict&#123;(name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs&#125;</span><br><span class="line">    <span class="comment"># 通过type来做类对象的创建</span></span><br><span class="line">    <span class="keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)  <span class="comment"># 返回一个对象，这个对象是个类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=upper_attr)</span>:</span></span><br><span class="line">    _metaclass__ = upper_attr</span><br><span class="line">    bar = <span class="string">'bip'</span></span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, <span class="string">'bar'</span>))  <span class="comment"># False</span></span><br><span class="line">print(hasattr(Foo, <span class="string">'BAR'</span>))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">print(f.BAR)  <span class="comment"># 'bip'</span></span><br></pre></td></tr></table></figure><ul><li>可以使用class来当做元类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.starswith(<span class="string">'__'</span>))</span><br><span class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复用type.__new__方法，OOP编程。</span></span><br><span class="line">    <span class="comment"># 由于type是元类也是类，本身也是通过__new__方法生成实例，只不过这个实例是一个类。</span></span><br><span class="line">    <span class="keyword">return</span> tpye.__new__(upperattr_metaclass, future_classs_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure><ul><li><strong>真实业务场景下的元类</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, dct)</span>:</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</span><br><span class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># supper继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, dct)</span>:</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</span><br><span class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line">        <span class="keyword">return</span> supper(UpperAttrMetaClass, cls).__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure><ul><li><strong>使用元类创建ORM实例</strong></li></ul><blockquote><p>熟悉Django框架的，应该知道ORM结构，元类创建API，使得调用简洁明了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 1.定义Field类，用于保存数据表的字段名和字段类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, column_type)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义元类，控制Model对象的创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="string">"""定义元类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">'Model'</span>:</span><br><span class="line">            <span class="keyword">return</span> super(ModelMetaClass, cls).__new__(cls, name, bases, attrs)</span><br><span class="line">        mappings = dict()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.iteritems():</span><br><span class="line">            <span class="comment"># 保存类属性和列的映射关系到mappings字典</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(v, Field):</span><br><span class="line">              print(<span class="string">'Found mapping: %s==&gt;%s'</span> % (k, v))</span><br><span class="line">             mappings[k] = v</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mapping.iterkeys():</span><br><span class="line">            <span class="comment"># 将雷属性移除，是定义的类字段不污染User类属性，只在实例中可以访问这些key</span></span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        <span class="comment"># 假设表名为类名的小写，创建类时添加一个__table__类属性</span></span><br><span class="line">        attrs[<span class="string">'__table__'</span>] = name.lower()</span><br><span class="line">        <span class="comment"># 保存属性和列的映射关系，创建类时添加一个__mappings__类属性</span></span><br><span class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings</span><br><span class="line">        <span class="keyword">return</span> super(ModelMetaClass, cls).__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Model基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict)</span>:</span></span><br><span class="line">    __metaclass__ = ModelMetaClass</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s'"</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.iteritems():</span><br><span class="line">            fields.append(v,name)</span><br><span class="line">            params.append(<span class="string">'?'</span>)</span><br><span class="line">            args.append(getattr(self, k,<span class="literal">None</span>))</span><br><span class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</span><br><span class="line">        print(<span class="string">'SQL: %s'</span> % sql)</span><br><span class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个model，用户表User，定义数据字段就可实现数据表和字段的操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>：</span></span><br><span class="line">    id = IntegerField('id')  # 对应数据表的id字段</span><br><span class="line">    name = StringField(<span class="string">'username'</span>)  <span class="comment"># 对应数据表的username字段</span></span><br><span class="line">    email = StringField(<span class="string">'email'</span>)  <span class="comment"># 对应数据表的email字段</span></span><br><span class="line">    password = StringField(<span class="string">'password'</span>)  <span class="comment"># 对应数据表的password字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例</span></span><br><span class="line">user = User(id=<span class="number">123456</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@163.com'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># 保存数据库</span></span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h2 id="4-staticmethod和-classmethod和实例方法"><a href="#4-staticmethod和-classmethod和实例方法" class="headerlink" title="4. @staticmethod和@classmethod和实例方法"></a>4. @staticmethod和@classmethod和实例方法</h2><blockquote><p><strong><a href="https://stackoverflow.com/questions/136097/difference-between-staticmethod-and-classmethod" target="_blank" rel="noopener">what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></strong></p></blockquote><blockquote><p><strong><a href="https://realpython.com/instance-class-and-static-methods-demystified/" target="_blank" rel="noopener">real python上详细知识</a></strong></p></blockquote><ul><li><strong>静态方法</strong></li></ul><blockquote><p>静态方法：其实和普通的方法一样，不需要对谁进行绑定，必须有@staticmethod修饰，类和实例都可以访问静态方法，调用方式A。static_foo(x)和a.static_foo(x)。</p></blockquote><ul><li><strong>类方法</strong></li></ul><blockquote><p>类方法：即在类里定义的函数方法，需要@classmethod修饰，并且有个隐藏参数cls，传递的是类而不是实例，类可以访问类方法，也可以访问实例方法，访问实例方法时必须带参数self。</p></blockquote><ul><li><strong>实例方法</strong></li></ul><blockquote><p>实例方法的调用离不开实例，必须有个参数self，把实例自己传给函数，调用是够是a.foo(x)与foo(a, x)等价。实例可以访问实例方法，也可以访问类方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>：</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"executing foo(%s)"</span> % <span class="params">(x)</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        print(<span class="string">"executing foo(%s, %s)"</span> % (self, x))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls, x)</span>:</span></span><br><span class="line">      print(<span class="string">"executing foo(%s, %s)"</span> % (cls, x)<span class="string">")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 静态方法</span></span><br><span class="line"><span class="string">    @staticmethod</span></span><br><span class="line"><span class="string">    def static_foo(x):</span></span><br><span class="line"><span class="string">      print("</span>executing foo(%s)<span class="string">" % x)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a = A()</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">实例/类</th><th align="center">实例方法</th><th align="center">类方法</th><th align="center">静态方法</th></tr></thead><tbody><tr><td align="center">实例: a = A()</td><td align="center">a.foo(x)</td><td align="center">a.class_foo(x)</td><td align="center">a.static_foo(x)</td></tr><tr><td align="center">类: A</td><td align="center">不可用</td><td align="center">A.class_foo(x)</td><td align="center">A.static_foo(x)</td></tr></tbody></table><h2 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5. 单例模式"></a>5. 单例模式</h2><ul><li><strong>使用<strong>new</strong>方法</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            orig = super(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>共享属性</strong></li></ul><blockquote><p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典,这样它们具有相同的属性和方法.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span><span class="params">(object)</span>:</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        ob = super(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> ob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span><span class="params">(Borg)</span>:</span></span><br><span class="line">  a = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>装饰器版本</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">   ···</span><br></pre></td></tr></table></figure><ul><li><strong>import方法</strong></li></ul><blockquote><p>作为python的模块是天然的单例模式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysingleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_singleton = My_Singleton()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to use</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"></span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure><ul><li><strong>元类实现单例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过__init__方法实现元类（优雅）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"__init__"</span>)</span><br><span class="line">        self.__instance = <span class="literal">None</span></span><br><span class="line">        super(Singleton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"__call__"</span>)</span><br><span class="line">        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.__instance = super(Singleton, self).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    __metaclass__ = Singleton</span><br><span class="line"></span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line">print(Foo.__dict__)</span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过元类的__new__方法实现元类（为了实例增加属性重写__new__方法，不推荐）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">"__new__"</span>)</span><br><span class="line">        attrs[<span class="string">"_instance"</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> super(Singleton, cls).__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"__call__"</span>)</span><br><span class="line">        <span class="keyword">if</span> self._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._instance = super(Singleton, self).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">   __metaclass__ = Singleton</span><br><span class="line"></span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line">print(Foo.__dict__)</span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2)</span><br></pre></td></tr></table></figure><p><strong><a href="http://python.jobbole.com/87294/" target="_blank" rel="noopener">单例模式伯乐在线详细解释</a></strong></p><h2 id="6-python常用库"><a href="#6-python常用库" class="headerlink" title="6. python常用库"></a>6. python常用库</h2><ul><li><p><strong>标准库</strong></p><p><strong><a href="https://www.cnblogs.com/haochengdu/p/8855028.html" target="_blank" rel="noopener">网友总结参考</a></strong></p><p><strong><a href="https://docs.python.org/zh-cn/3.8/library/index.html" target="_blank" rel="noopener">官网中文参考</a></strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">os：提供了不少于操作系统相关联的函数  </span><br><span class="line"></span><br><span class="line">sys：通常用于命令行参数</span><br><span class="line"></span><br><span class="line">res：正则表达式操作</span><br><span class="line"></span><br><span class="line">math：数学运算</span><br><span class="line"></span><br><span class="line">decimal：十进制定点和浮点运算</span><br><span class="line"></span><br><span class="line">datetime：日期时间</span><br><span class="line"></span><br><span class="line">collections：容器数据类型</span><br><span class="line"></span><br><span class="line">json：JSON 编码和解码器</span><br><span class="line"></span><br><span class="line">base64：Base16, Base32, Base64, Base85 数据编码</span><br><span class="line">heapq：堆队列算法</span><br><span class="line"></span><br><span class="line">copy：复制</span><br><span class="line"></span><br><span class="line">threading：基于线程的并行</span><br><span class="line"></span><br><span class="line">multiprocessing：基于进程的并行</span><br><span class="line"></span><br><span class="line">subprocess：子进程管理</span><br><span class="line"></span><br><span class="line">queue：一个同步的队列类</span><br><span class="line"></span><br><span class="line">random：生成伪随机数</span><br><span class="line"></span><br><span class="line">pprint：数据美化输出</span><br><span class="line"></span><br><span class="line">itertools：为高效循环而创建迭代器的函数</span><br><span class="line"></span><br><span class="line">functools：高阶函数和可调用对象上的操作</span><br><span class="line"></span><br><span class="line">operator：标准运算符替代函数</span><br><span class="line"></span><br><span class="line">logging：Python 的日志记录工具</span><br><span class="line"></span><br><span class="line">hashlib：安全哈希与消息摘要</span><br><span class="line"></span><br><span class="line">pickle：Python 对象序列化</span><br><span class="line"></span><br><span class="line">html.parser：简单的 HTML 和 XHTML 解析器</span><br><span class="line"></span><br><span class="line">urllib：URL 处理模块</span><br><span class="line"></span><br><span class="line">traceback：打印或检索堆栈回溯</span><br><span class="line"></span><br><span class="line">__future__：Future 语句定义</span><br><span class="line"></span><br><span class="line">gc：垃圾回收器接口</span><br></pre></td></tr></table></figure><ul><li><p><strong>科学计算与数据分析库</strong></p><blockquote><p>numpy：科学计算包，支持N维数组运算、处理大型矩阵、成熟的广播函数库、矢量运算、线性代数、傅里叶变换、随机数生成，并可与C++/Fortran语言无缝结合。</p></blockquote><blockquote><p>scipy：建立在NumPy基础上，它是离散傅立叶变换、线性代数、优化和稀疏矩阵等多种高级科学和工程模块最有用的库之一。</p></blockquote><blockquote><p>pandas：主要用于结构化数据的运算和操作，广泛用于数据整理和预处理，其有助于提高Python在数据科学社区的使用。</p></blockquote><blockquote><p>matplotlib：主要用于绘制各种各样的图形，从直方图到线图、热力图，还可以使用Latex命令在图像中添加数学符号。</p></blockquote><blockquote><p>Scikit：主要用于机器学习，该库建立在NumPy、SciPy和matplotlib基础上，包含许多有效的机器学习和统计建模工具，如分类、回归、聚类和降维。</p></blockquote><blockquote><p>Statsmodels：用于统计建模，是一个Python中提供用户探索数据、估计统计模型和执行统计测试的模组。可用于不同类型数据的描述性统计，统计测试，绘图功能和结果统计。</p></blockquote><blockquote><p>Seaborn：用于数据可视化，是一个用于在Python中制作有吸引力和翔实的统计图形库。它是基于matplotlib。Seaborn旨在使可视化成为探索和理解数据的核心组成。  </p></blockquote><blockquote><p>Bokeh：用于在现代网络浏览器上创建交互式图表，仪表盘和数据应用程序。它赋予用户以D3.js的风格生成优雅简洁的图形。此外，它具有超大型或流式数据集的高性能交互能力。</p></blockquote><blockquote><p>Blaze: 将Numpy和Pandas的能力扩展到分布式和流式传输数据集。它可以用于从众多来源包括Bcolz，MongDB,SQLAlchemy,Apache Spark,PyTables等访问数据，与Bokeh一起，可以作为在矩形数据模块上创建有效可视化和仪表盘的强大的工具。</p></blockquote><blockquote><p>Sympy：用于符号计算，具有从基本算数符号到微积分、袋鼠、离散数学和量子物理学的广泛能力，另一个有用的功能是将计算结果格式化为LaTeX代码。</p></blockquote></li><li><p><strong>第三方库</strong></p><blockquote><p>pymysqldb：是在 Python2.x 版本中用于连接 MySQL 服务器的一个库，导包：import MySQLdb。</p></blockquote><blockquote><p>PyMySQL：是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，导包：import pymysql，当要向下兼容python2时,可以加上：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个连接对象，再使用创建游标</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'1234'</span>, db=<span class="string">'mysql'</span>)</span><br><span class="line">cursor = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个SQL语句</span></span><br><span class="line">sql = <span class="string">"select * from user"</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从游标中取出所有记录放到一个序列中并关闭游标</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">print(result)</span><br><span class="line">cursor.close()</span><br></pre></td></tr></table></figure><blockquote><p>djano：是一个高层次的web开发框架，特点是开发快、代码少。可扩展性强。采用MTV（Model、Template、View）模型组织资源，框架功能丰富，模板扩展选择最多。</p></blockquote><blockquote><p>flask： 是一个web开发的微框架，严格来说，它仅仅提供web服务器支持，不提供全栈开发支持。然而，Flask非常轻量、非常简单，特别适合小微原型系统的开发，耗时少，开发效率高。  </p></blockquote><blockquote><p>Tornado：是一个基于异步网络功能库的Web开发框架，能够支持几万个开放连接，Web服务比较稳定。比较适合高并发场景下的Web系统，如秒杀系统、抢票系统等，灵活性较差。</p></blockquote><blockquote><p>Falcon：是一个支持大规模微服务API或移动App后端响应的web开发框架，它完全基于python并提供了非常高性能、可靠性和可扩展性。</p></blockquote><blockquote><p>Pyramid：是一个扩展性很强且灵活的web开发框架，上手十分容易，比较适合中等规模且边开发边设计的场景。它不提供绝对严格的框架定义，根据需求可以扩展开发，对高阶程序员十分友好。</p></blockquote><blockquote><p>Quart：是面向ASGI(异步服务器网关接口)开发的web为框架，采用Flask兼容的API接口，提供非常轻量级的开发方式。</p></blockquote><blockquote><p>requests：用于Web访问，类似于python标准库的urllib2，更容易更方便上手，适合初学者。</p></blockquote><blockquote><p>scrapy： 用于网络爬虫，它是获取特定模式数据的非常有用的框架，从网站首页URL开始,然后挖掘网站内的网页内容来手机信息。</p></blockquote><blockquote><p>selenium：是一个用于测试网站的自动化工具，支持Chrome、Firefox、Safari等主流界面浏览器，同时也支持PhantomJS无界面浏览器。</p></blockquote><blockquote><p>celery：是一个由python编写的简单、灵活、可靠的用于处理大量信息的分布式系统，它同时提供操作和维护分布式所需的工具，专注于实时任务，支持任务调度。是一个分布式队列管理工具，可以用celery提供接口快速实现并管理一个分布式任务队列。</p></blockquote></li></ul><h2 id="7-python中的类型转换"><a href="#7-python中的类型转换" class="headerlink" title="7. python中的类型转换"></a>7. python中的类型转换</h2><table><thead><tr><th>函数</th><th>作用</th><th></th><th>函数</th><th>作用</th><th></th><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>int()</td><td>转整型</td><td></td><td>list()</td><td>转列表</td><td></td><td>bin()</td><td>整数转2进制</td></tr><tr><td>float()</td><td>转浮点型</td><td></td><td>dict()</td><td>转字典</td><td></td><td>oct()</td><td>整数转6进制</td></tr><tr><td>str()</td><td>转字符串</td><td></td><td>set()</td><td>转集合</td><td></td><td>hex()</td><td>整数转16进制</td></tr><tr><td>ord()</td><td>字符转整数</td><td></td><td>tuple()</td><td>转元组</td><td></td><td>complex()</td><td>实数转复数</td></tr></tbody></table><h2 id="8-文件流操作"><a href="#8-文件流操作" class="headerlink" title="8. 文件流操作"></a>8. 文件流操作</h2><ul><li><strong>打开文件</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f=open(<span class="string">'file_name'</span>, <span class="string">'file_type'</span>)</span><br><span class="line"><span class="keyword">if</span> f:  <span class="comment"># 判断文件是否打开</span></span><br><span class="line">file_type</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'file_name'</span>, <span class="string">'file_type'</span>) <span class="keyword">as</span> f:</span><br></pre></td></tr></table></figure><ul><li><strong>访问模式</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">w: 只写</span><br><span class="line"></span><br><span class="line">r：只读</span><br><span class="line"></span><br><span class="line">a: 追加写入</span><br><span class="line">rb: 二进制只读</span><br><span class="line"></span><br><span class="line">wb：二进制写入</span><br><span class="line"></span><br><span class="line">ab：二进制追加写入</span><br><span class="line"></span><br><span class="line">r+：打开一个文件用于读写，文件指针将会放在文件的开头。</span><br><span class="line"></span><br><span class="line">w+：打开一个文件用于读写，如果文件已经存在则将其覆盖，如果文件不存在，则创建新文件。</span><br><span class="line"></span><br><span class="line">a+：打开一个文件用于读写，追加模式。如果文件存在，文件指针将会放在文件的结尾；如果该文件不存在，穿件新文件用于读写。</span><br><span class="line"></span><br><span class="line">rb+: 以二进制格式打开一个文件用于读写，文件指正将会放在文件的开头，一般用于非文本文件如图片等。</span><br><span class="line"></span><br><span class="line">wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件，一般用于非文本文件如图片等。</span><br><span class="line"></span><br><span class="line">ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾；如果文件不存在，创建新文件用于读写。</span><br></pre></td></tr></table></figure><ul><li><strong>写文件</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.write(content)  <span class="comment"># 打开文件后，将制定内容写入文件中</span></span><br></pre></td></tr></table></figure><ul><li><strong>读取文件</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f.read(lenth)  <span class="comment"># 使用read可以从文件中读取制定长度的数据，并将指针移到这条数据之后。如果为空，则默认读取全部数据。</span></span><br><span class="line"></span><br><span class="line">f.readline()  <span class="comment"># 读取文件中一行数据的信息，指针移动到下一行。</span></span><br><span class="line"></span><br><span class="line">f.readlines() <span class="comment"># 读取整个文件的数据信息，返回一个列表，列表中每个元素为一行数据信息。</span></span><br></pre></td></tr></table></figure><ul><li><strong>查看指针位置</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.tell()  <span class="comment"># 查看单签位置，就是指针对应的位置</span></span><br></pre></td></tr></table></figure><ul><li><strong>指针定位</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seek(offset, <span class="keyword">from</span>)  <span class="comment"># 将指针定位到某个位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>: <span class="comment"># 方向，0表示文件开头；1表示文件当前位置；2表示文件的末尾</span></span><br><span class="line">offset: 偏移量</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">    f.seek(<span class="number">5</span>,<span class="number">0</span>)  <span class="comment"># 文件开头，向后偏移5个位置</span></span><br><span class="line">    f.seek(<span class="number">-3</span>,<span class="number">2</span>)  <span class="comment"># 文件结尾，向前偏移3个位置</span></span><br></pre></td></tr></table></figure><h2 id="9-new-和-init的区别"><a href="#9-new-和-init的区别" class="headerlink" title="9. new 和 init的区别"></a>9. <strong>new</strong> 和 <strong>init</strong>的区别</h2><ul><li><strong>new</strong>是一个静态方法，而<strong>init</strong>是一个实例方法</li><li><strong>new</strong>方法会返回一个创建的实例，而<strong>init</strong>什么都不返回</li><li>只有在<strong>new</strong>返回一个cls的实例时，后面的<strong>init</strong>才能被调用</li><li>创建一个新实例时调用<strong>new</strong>方法，初始化一个实例时调用<strong>init</strong>方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对python语言基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="编程语言-python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="知识回顾" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>Web与前端知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/Web%E4%B8%8E%E5%89%8D%E7%AB%AF/"/>
    <id>http://yoursite.com/2020/05/08/Web%E4%B8%8E%E5%89%8D%E7%AB%AF/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T17:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对Web基础和前端框架知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#web基础">Web基础</a><ul><li><a href="#1-常用的网络传输协议">1. 常用的网络传输协议</a></li><li><a href="#2-常见的状态码">2. 常见的状态码</a></li><li><a href="#3-三次握手">3. 三次握手</a></li><li><a href="#4-四次挥手">4. 四次挥手</a></li></ul></li><li><a href="#django">Django</a></li><li><a href="#flask">Flask</a></li><li><a href="#tornado">Tornado</a></li><li><a href="#jquery">jQuery</a></li><li><a href="#vue">Vue</a></li><li><a href="#angularjs">AngularJS</a></li><li><a href="#react">React</a></li></ul><!-- /TOC --></div><h1 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h1><h2 id="1-常用的网络传输协议"><a href="#1-常用的网络传输协议" class="headerlink" title="1. 常用的网络传输协议"></a>1. 常用的网络传输协议</h2><ul><li>TCP：传输控制协议，可靠传输，面向连接</li><li>UDP：用户数据包协议，不可靠传输，面向无连接</li><li>FTP：文件传输协议,用于上传和下载文件</li><li>HTTP：超文本传输协议，基于TCP/IP通信协议，面向对象</li><li>SMTP：邮件传输协议</li><li>TELNET：Internet远程登录服务的标准协议和主要方式</li><li>DNS：域名系统，将域名解析为ip地址</li></ul><h2 id="2-常见的状态码"><a href="#2-常见的状态码" class="headerlink" title="2. 常见的状态码"></a>2. 常见的状态码</h2><table><thead><tr><th align="center">状态码</th><th align="left">状态</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">200</td><td align="left">Ok</td><td align="left">请求成功</td></tr><tr><td align="center">400</td><td align="left">Bad Request</td><td align="left">请求语法错误，不能被服务器解析</td></tr><tr><td align="center">401</td><td align="left">Unauthorized</td><td align="left">未经授权，需与www-Authenticate一起用</td></tr><tr><td align="center">403</td><td align="left">Forbidden</td><td align="left">服务器收到请求，但拒绝提供服务</td></tr><tr><td align="center">404</td><td align="left">Not Found</td><td align="left">请求资源不存在</td></tr><tr><td align="center">500</td><td align="left">Internal Server Error</td><td align="left">服务器发生不可预期的错误</td></tr><tr><td align="center">503</td><td align="left">Server Unavailable</td><td align="left">服务器当前请求不可用</td></tr></tbody></table><h2 id="3-三次握手"><a href="#3-三次握手" class="headerlink" title="3. 三次握手"></a>3. 三次握手</h2><ul><li>第一次握手：建立连接时，客户端发送SYN（SYN=x）到服务器，有主动打开状态进入SYN_SENT状态，等待服务器确认。</li><li>第二次握手：服务器收到SYN包，必须确认客户的SYN（ack=x+1）,同时自己也发送一个SYN包（syn=y），即SYN+ACK包，服务器进入SYN_RECV状态。</li><li>第三次握手：客户端收到服务器的SYN+ACK包，想服务器发送确认ACK包（ACK=y+1）,发送完毕，客户端和服务器进入ESTABLISHED状态，完成握手。</li></ul><h2 id="4-四次挥手"><a href="#4-四次挥手" class="headerlink" title="4. 四次挥手"></a>4. 四次挥手</h2><h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h1><h1 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h1><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对Web基础和前端框架知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="知识回顾" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>操作系统知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/05/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T18:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对操作系统和Linux基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#操作系统">操作系统</a><ul><li><a href="#1-进程线程以及协程间的区别">1. 进程、线程以及协程间的区别</a></li><li><a href="#2-线程间通信的方式">2. 线程间通信的方式</a></li><li><a href="#3-进程间通信的方式">3. 进程间通信的方式</a></li><li><a href="#4-selectpoll和epoll">4. select,poll和epoll</a></li><li><a href="#5-调度算法">5. 调度算法</a></li><li><a href="#6-死锁">6. 死锁</a></li></ul></li><li><a href="#linux">Linux</a><ul><li><a href="#1-linux常用命令">1. linux常用命令</a></li><li><a href="#2-linux内存管理机制">2. Linux内存管理机制</a></li></ul></li></ul><!-- /TOC --></div><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="1-进程、线程以及协程间的区别"><a href="#1-进程、线程以及协程间的区别" class="headerlink" title="1. 进程、线程以及协程间的区别"></a>1. 进程、线程以及协程间的区别</h2><h2 id="2-线程间通信的方式"><a href="#2-线程间通信的方式" class="headerlink" title="2. 线程间通信的方式"></a>2. 线程间通信的方式</h2><h2 id="3-进程间通信的方式"><a href="#3-进程间通信的方式" class="headerlink" title="3. 进程间通信的方式"></a>3. 进程间通信的方式</h2><h2 id="4-select-poll和epoll"><a href="#4-select-poll和epoll" class="headerlink" title="4. select,poll和epoll"></a>4. select,poll和epoll</h2><h2 id="5-调度算法"><a href="#5-调度算法" class="headerlink" title="5. 调度算法"></a>5. 调度算法</h2><h2 id="6-死锁"><a href="#6-死锁" class="headerlink" title="6. 死锁"></a>6. 死锁</h2><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="1-linux常用命令"><a href="#1-linux常用命令" class="headerlink" title="1. linux常用命令"></a>1. linux常用命令</h2><h2 id="2-Linux内存管理机制"><a href="#2-Linux内存管理机制" class="headerlink" title="2. Linux内存管理机制"></a>2. Linux内存管理机制</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对操作系统和Linux基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="进程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="锁" scheme="http://yoursite.com/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>数据库知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/05/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T17:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对数据库基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#数据库常识">数据库常识</a><ul><li><a href="#1-什么是索引">1. 什么是索引</a></li><li><a href="#2-事务的特性">2. 事务的特性</a></li><li><a href="#3-存储过程">3. 存储过程</a></li><li><a href="#4-数据库怎么优化查询效率">4. 数据库怎么优化查询效率</a></li><li><a href="#5-数据库优化方案">5. 数据库优化方案</a></li><li><a href="#6-什么是悲观锁">6. 什么是悲观锁</a></li><li><a href="#7-什么是乐观锁">7. 什么是乐观锁</a></li><li><a href="#8-什么是缓存穿透">8. 什么是缓存穿透</a></li><li><a href="#9-什么是缓存击穿">9. 什么是缓存击穿</a></li><li><a href="#10-什么是缓存雪崩">10. 什么是缓存雪崩</a></li></ul></li><li><a href="#mysql数据库">Mysql数据库</a><ul><li><a href="#1-mysql-常用数据类型">1. mysql 常用数据类型</a></li><li><a href="#2-mysql数据库引擎">2. mysql数据库引擎</a></li><li><a href="#3-mysql的索引类型">3. mysql的索引类型</a></li><li><a href="#4-mysql-几种锁的区别">4. Mysql 几种锁的区别</a></li><li><a href="#5-mysql事务原理特性事务并发控制">5. mysql事务原理、特性、事务并发控制</a></li></ul></li><li><a href="#redis数据库">Redis数据库</a><ul><li><a href="#1-redis的原理">1. redis的原理</a></li><li><a href="#2-持久化机制">2. 持久化机制</a></li><li><a href="#3-redis-和-memcached-的主要区别">3. redis 和 memcached 的主要区别</a></li><li><a href="#4-redis-高可用">4. Redis 高可用</a></li><li><a href="#5-redis-高并发">5. Redis 高并发</a></li></ul></li><li><a href="#mongodb数据库">MongoDB数据库</a></li><li><a href="#hive数据库">Hive数据库</a></li><li><a href="#hbase数据库">Hbase数据库</a></li><li><a href="#hadoop生态">Hadoop生态</a></li></ul><!-- /TOC --></div><h1 id="数据库常识"><a href="#数据库常识" class="headerlink" title="数据库常识"></a>数据库常识</h1><h2 id="1-什么是索引"><a href="#1-什么是索引" class="headerlink" title="1. 什么是索引"></a>1. 什么是索引</h2><h2 id="2-事务的特性"><a href="#2-事务的特性" class="headerlink" title="2. 事务的特性"></a>2. 事务的特性</h2><ul><li>原子性(Atomicity)</li></ul><blockquote><p>事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。</p></blockquote><ul><li>一致性(Consistency)</li></ul><blockquote><p>几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。</p></blockquote><ul><li>隔离性(Isolation)</li></ul><blockquote><p>事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。</p></blockquote><ul><li>持久性(Durability)</li></ul><blockquote><p>对于任意已交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现异常。</p></blockquote><h2 id="3-存储过程"><a href="#3-存储过程" class="headerlink" title="3. 存储过程"></a>3. 存储过程</h2><h2 id="4-数据库怎么优化查询效率"><a href="#4-数据库怎么优化查询效率" class="headerlink" title="4. 数据库怎么优化查询效率"></a>4. 数据库怎么优化查询效率</h2><h2 id="5-数据库优化方案"><a href="#5-数据库优化方案" class="headerlink" title="5. 数据库优化方案"></a>5. 数据库优化方案</h2><h2 id="6-什么是悲观锁"><a href="#6-什么是悲观锁" class="headerlink" title="6. 什么是悲观锁"></a>6. 什么是悲观锁</h2><h2 id="7-什么是乐观锁"><a href="#7-什么是乐观锁" class="headerlink" title="7. 什么是乐观锁"></a>7. 什么是乐观锁</h2><h2 id="8-什么是缓存穿透"><a href="#8-什么是缓存穿透" class="headerlink" title="8. 什么是缓存穿透"></a>8. 什么是缓存穿透</h2><h2 id="9-什么是缓存击穿"><a href="#9-什么是缓存击穿" class="headerlink" title="9. 什么是缓存击穿"></a>9. 什么是缓存击穿</h2><h2 id="10-什么是缓存雪崩"><a href="#10-什么是缓存雪崩" class="headerlink" title="10. 什么是缓存雪崩"></a>10. 什么是缓存雪崩</h2><h1 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h1><h2 id="1-mysql-常用数据类型"><a href="#1-mysql-常用数据类型" class="headerlink" title="1. mysql 常用数据类型"></a>1. mysql 常用数据类型</h2><h2 id="2-mysql数据库引擎"><a href="#2-mysql数据库引擎" class="headerlink" title="2. mysql数据库引擎"></a>2. mysql数据库引擎</h2><h2 id="3-mysql的索引类型"><a href="#3-mysql的索引类型" class="headerlink" title="3. mysql的索引类型"></a>3. mysql的索引类型</h2><h2 id="4-Mysql-几种锁的区别"><a href="#4-Mysql-几种锁的区别" class="headerlink" title="4. Mysql 几种锁的区别"></a>4. Mysql 几种锁的区别</h2><h2 id="5-mysql事务原理、特性、事务并发控制"><a href="#5-mysql事务原理、特性、事务并发控制" class="headerlink" title="5. mysql事务原理、特性、事务并发控制"></a>5. mysql事务原理、特性、事务并发控制</h2><h1 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h1><h2 id="1-redis的原理"><a href="#1-redis的原理" class="headerlink" title="1. redis的原理"></a>1. redis的原理</h2><h2 id="2-持久化机制"><a href="#2-持久化机制" class="headerlink" title="2. 持久化机制"></a>2. 持久化机制</h2><h2 id="3-redis-和-memcached-的主要区别"><a href="#3-redis-和-memcached-的主要区别" class="headerlink" title="3. redis 和 memcached 的主要区别"></a>3. redis 和 memcached 的主要区别</h2><h2 id="4-Redis-高可用"><a href="#4-Redis-高可用" class="headerlink" title="4. Redis 高可用"></a>4. Redis 高可用</h2><h2 id="5-Redis-高并发"><a href="#5-Redis-高并发" class="headerlink" title="5. Redis 高并发"></a>5. Redis 高并发</h2><h1 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h1><h1 id="Hive数据库"><a href="#Hive数据库" class="headerlink" title="Hive数据库"></a>Hive数据库</h1><h1 id="Hbase数据库"><a href="#Hbase数据库" class="headerlink" title="Hbase数据库"></a>Hbase数据库</h1><h1 id="Hadoop生态"><a href="#Hadoop生态" class="headerlink" title="Hadoop生态"></a>Hadoop生态</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对数据库基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>数据结构知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2020/05/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T17:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对数据结构基础知识进行梳理、回顾，解析原理，并通过实际例子深刻理解。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#数据结构">数据结构</a><ul><li><a href="#1-字符串string">1. 字符串(String)</a></li><li><a href="#2-数组array">2. 数组(Array)</a></li><li><a href="#3-堆heap">3. 堆(Heap)</a></li><li><a href="#4-栈stack">4. 栈(Stack)</a></li><li><a href="#5-队列queue">5. 队列(Queue)</a></li><li><a href="#6-链表linked-list">6. 链表(Linked-List)</a></li><li><a href="#7-树tree">7. 树(Tree)</a></li><li><a href="#8-图graph">8. 图(Graph)</a></li><li><a href="#9-哈希表hash">9. 哈希表(Hash)</a></li></ul></li></ul><!-- /TOC --></div><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="1-字符串-String"><a href="#1-字符串-String" class="headerlink" title="1. 字符串(String)"></a>1. 字符串(String)</h2><h2 id="2-数组-Array"><a href="#2-数组-Array" class="headerlink" title="2. 数组(Array)"></a>2. 数组(Array)</h2><h2 id="3-堆-Heap"><a href="#3-堆-Heap" class="headerlink" title="3. 堆(Heap)"></a>3. 堆(Heap)</h2><h2 id="4-栈-Stack"><a href="#4-栈-Stack" class="headerlink" title="4. 栈(Stack)"></a>4. 栈(Stack)</h2><h2 id="5-队列-Queue"><a href="#5-队列-Queue" class="headerlink" title="5. 队列(Queue)"></a>5. 队列(Queue)</h2><h2 id="6-链表-Linked-List"><a href="#6-链表-Linked-List" class="headerlink" title="6. 链表(Linked-List)"></a>6. 链表(Linked-List)</h2><h2 id="7-树-Tree"><a href="#7-树-Tree" class="headerlink" title="7. 树(Tree)"></a>7. 树(Tree)</h2><h2 id="8-图-Graph"><a href="#8-图-Graph" class="headerlink" title="8. 图(Graph)"></a>8. 图(Graph)</h2><h2 id="9-哈希表-Hash"><a href="#9-哈希表-Hash" class="headerlink" title="9. 哈希表(Hash)"></a>9. 哈希表(Hash)</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对数据结构基础知识进行梳理、回顾，解析原理，并通过实际例子深刻理解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>机器学习知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/05/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T18:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对机器学习基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#1-机器学习基础">1 机器学习基础</a><ul><li><a href="#11-机器学习概述">1.1 机器学习概述</a></li><li><a href="#12-监督学习">1.2 监督学习</a></li><li><a href="#13-非监督学习">1.3 非监督学习</a></li><li><a href="#14-增强学习">1.4 增强学习</a></li><li><a href="#15-深度学习">1.5 深度学习</a></li></ul></li><li><a href="#2-分类问题">2 分类问题</a><ul><li><a href="#21-knn">2.1 KNN</a></li><li><a href="#22-nb">2.2 NB</a></li><li><a href="#23-svm">2.3 SVM</a></li><li><a href="#24-adaboost">2.4 AdaBoost</a></li><li><a href="#25-dt">2.5 DT</a></li></ul></li><li><a href="#3-聚类分析">3 聚类分析</a><ul><li><a href="#31-k-means">3.1 K-means</a></li><li><a href="#32-dbscan">3.2 DBSCAN</a></li><li><a href="#33-lda">3.3 LDA</a></li></ul></li><li><a href="#4-预测分析">4 预测分析</a><ul><li><a href="#41-时间序列">4.1 时间序列</a></li><li><a href="#42-bp神经网络">4.2 BP神经网络</a></li></ul></li><li><a href="#5-关联分析">5 关联分析</a><ul><li><a href="#51-apriori">5.1 Apriori</a></li><li><a href="#52-fp-growth">5.2 FP-Growth</a></li></ul></li><li><a href="#6-回归分析">6 回归分析</a><ul><li><a href="#61-一元回归">6.1 一元回归</a></li><li><a href="#62-多元回归">6.2 多元回归</a></li><li><a href="#63-逻辑回归">6.3 逻辑回归</a></li></ul></li><li><a href="#7-集成学习">7 集成学习</a><ul><li><a href="#71-bagging">7.1 Bagging</a></li><li><a href="#72-随机森林">7.2. 随机森林</a></li><li><a href="#73-boosting">7.3 Boosting</a></li><li><a href="#74-adaboost">7.4 AdaBoost</a></li></ul></li><li><a href="#8-深度学习">8 深度学习</a><ul><li><a href="#81-有监督">8.1 有监督</a></li><li><a href="#82-无监督">8.2 无监督</a></li><li><a href="#83-tensorflow">8.3 TensorFlow</a></li><li><a href="#84-theano">8.4 Theano</a></li></ul></li><li><a href="#9-数据预处理">9 数据预处理</a><ul><li><a href="#91-数据清洗">9.1 数据清洗</a><ul><li><a href="#911-异常值处理">9.1.1 异常值处理</a></li><li><a href="#912-缺失值处理">9.1.2 缺失值处理</a></li><li><a href="#913-噪声处理">9.1.3 噪声处理</a></li><li><a href="#914-倾斜数据处理">9.1.4 倾斜数据处理</a></li></ul></li><li><a href="#92-数据集成">9.2 数据集成</a></li><li><a href="#93-数据变换">9.3 数据变换</a></li><li><a href="#94-数据归约">9.4 数据归约</a></li></ul></li><li><a href="#10-数据降维">10 数据降维</a><ul><li><a href="#101-主成份分析">10.1 主成份分析</a></li><li><a href="#102-奇异值分解">10.2 奇异值分解</a></li></ul></li></ul><!-- /TOC --></div><h1 id="1-机器学习基础"><a href="#1-机器学习基础" class="headerlink" title="1 机器学习基础"></a>1 机器学习基础</h1><h2 id="1-1-机器学习概述"><a href="#1-1-机器学习概述" class="headerlink" title="1.1 机器学习概述"></a>1.1 机器学习概述</h2><h2 id="1-2-监督学习"><a href="#1-2-监督学习" class="headerlink" title="1.2 监督学习"></a>1.2 监督学习</h2><h2 id="1-3-非监督学习"><a href="#1-3-非监督学习" class="headerlink" title="1.3 非监督学习"></a>1.3 非监督学习</h2><h2 id="1-4-增强学习"><a href="#1-4-增强学习" class="headerlink" title="1.4 增强学习"></a>1.4 增强学习</h2><h2 id="1-5-深度学习"><a href="#1-5-深度学习" class="headerlink" title="1.5 深度学习"></a>1.5 深度学习</h2><h1 id="2-分类问题"><a href="#2-分类问题" class="headerlink" title="2 分类问题"></a>2 分类问题</h1><h2 id="2-1-KNN"><a href="#2-1-KNN" class="headerlink" title="2.1 KNN"></a>2.1 KNN</h2><h2 id="2-2-NB"><a href="#2-2-NB" class="headerlink" title="2.2 NB"></a>2.2 NB</h2><h2 id="2-3-SVM"><a href="#2-3-SVM" class="headerlink" title="2.3 SVM"></a>2.3 SVM</h2><h2 id="2-4-AdaBoost"><a href="#2-4-AdaBoost" class="headerlink" title="2.4 AdaBoost"></a>2.4 AdaBoost</h2><h2 id="2-5-DT"><a href="#2-5-DT" class="headerlink" title="2.5 DT"></a>2.5 DT</h2><h1 id="3-聚类分析"><a href="#3-聚类分析" class="headerlink" title="3 聚类分析"></a>3 聚类分析</h1><h2 id="3-1-K-means"><a href="#3-1-K-means" class="headerlink" title="3.1 K-means"></a>3.1 K-means</h2><h2 id="3-2-DBSCAN"><a href="#3-2-DBSCAN" class="headerlink" title="3.2 DBSCAN"></a>3.2 DBSCAN</h2><h2 id="3-3-LDA"><a href="#3-3-LDA" class="headerlink" title="3.3 LDA"></a>3.3 LDA</h2><h1 id="4-预测分析"><a href="#4-预测分析" class="headerlink" title="4 预测分析"></a>4 预测分析</h1><h2 id="4-1-时间序列"><a href="#4-1-时间序列" class="headerlink" title="4.1 时间序列"></a>4.1 时间序列</h2><h2 id="4-2-BP神经网络"><a href="#4-2-BP神经网络" class="headerlink" title="4.2 BP神经网络"></a>4.2 BP神经网络</h2><h1 id="5-关联分析"><a href="#5-关联分析" class="headerlink" title="5 关联分析"></a>5 关联分析</h1><h2 id="5-1-Apriori"><a href="#5-1-Apriori" class="headerlink" title="5.1 Apriori"></a>5.1 Apriori</h2><h2 id="5-2-FP-Growth"><a href="#5-2-FP-Growth" class="headerlink" title="5.2 FP-Growth"></a>5.2 FP-Growth</h2><h1 id="6-回归分析"><a href="#6-回归分析" class="headerlink" title="6 回归分析"></a>6 回归分析</h1><h2 id="6-1-一元回归"><a href="#6-1-一元回归" class="headerlink" title="6.1 一元回归"></a>6.1 一元回归</h2><h2 id="6-2-多元回归"><a href="#6-2-多元回归" class="headerlink" title="6.2 多元回归"></a>6.2 多元回归</h2><h2 id="6-3-逻辑回归"><a href="#6-3-逻辑回归" class="headerlink" title="6.3 逻辑回归"></a>6.3 逻辑回归</h2><h1 id="7-集成学习"><a href="#7-集成学习" class="headerlink" title="7 集成学习"></a>7 集成学习</h1><h2 id="7-1-Bagging"><a href="#7-1-Bagging" class="headerlink" title="7.1 Bagging"></a>7.1 Bagging</h2><h2 id="7-2-随机森林"><a href="#7-2-随机森林" class="headerlink" title="7.2. 随机森林"></a>7.2. 随机森林</h2><h2 id="7-3-Boosting"><a href="#7-3-Boosting" class="headerlink" title="7.3 Boosting"></a>7.3 Boosting</h2><h2 id="7-4-AdaBoost"><a href="#7-4-AdaBoost" class="headerlink" title="7.4 AdaBoost"></a>7.4 AdaBoost</h2><h1 id="8-深度学习"><a href="#8-深度学习" class="headerlink" title="8 深度学习"></a>8 深度学习</h1><h2 id="8-1-有监督"><a href="#8-1-有监督" class="headerlink" title="8.1 有监督"></a>8.1 有监督</h2><h2 id="8-2-无监督"><a href="#8-2-无监督" class="headerlink" title="8.2 无监督"></a>8.2 无监督</h2><h2 id="8-3-TensorFlow"><a href="#8-3-TensorFlow" class="headerlink" title="8.3 TensorFlow"></a>8.3 TensorFlow</h2><h2 id="8-4-Theano"><a href="#8-4-Theano" class="headerlink" title="8.4 Theano"></a>8.4 Theano</h2><h1 id="9-数据预处理"><a href="#9-数据预处理" class="headerlink" title="9 数据预处理"></a>9 数据预处理</h1><h2 id="9-1-数据清洗"><a href="#9-1-数据清洗" class="headerlink" title="9.1 数据清洗"></a>9.1 数据清洗</h2><h3 id="9-1-1-异常值处理"><a href="#9-1-1-异常值处理" class="headerlink" title="9.1.1 异常值处理"></a>9.1.1 异常值处理</h3><h3 id="9-1-2-缺失值处理"><a href="#9-1-2-缺失值处理" class="headerlink" title="9.1.2 缺失值处理"></a>9.1.2 缺失值处理</h3><h3 id="9-1-3-噪声处理"><a href="#9-1-3-噪声处理" class="headerlink" title="9.1.3 噪声处理"></a>9.1.3 噪声处理</h3><h3 id="9-1-4-倾斜数据处理"><a href="#9-1-4-倾斜数据处理" class="headerlink" title="9.1.4 倾斜数据处理"></a>9.1.4 倾斜数据处理</h3><h2 id="9-2-数据集成"><a href="#9-2-数据集成" class="headerlink" title="9.2 数据集成"></a>9.2 数据集成</h2><h2 id="9-3-数据变换"><a href="#9-3-数据变换" class="headerlink" title="9.3 数据变换"></a>9.3 数据变换</h2><h2 id="9-4-数据归约"><a href="#9-4-数据归约" class="headerlink" title="9.4 数据归约"></a>9.4 数据归约</h2><h1 id="10-数据降维"><a href="#10-数据降维" class="headerlink" title="10 数据降维"></a>10 数据降维</h1><h2 id="10-1-主成份分析"><a href="#10-1-主成份分析" class="headerlink" title="10.1 主成份分析"></a>10.1 主成份分析</h2><h2 id="10-2-奇异值分解"><a href="#10-2-奇异值分解" class="headerlink" title="10.2 奇异值分解"></a>10.2 奇异值分解</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对机器学习基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="分类问题" scheme="http://yoursite.com/tags/%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="聚类分析" scheme="http://yoursite.com/tags/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/"/>
    
      <category term="预测分析" scheme="http://yoursite.com/tags/%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90/"/>
    
      <category term="回归分析" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    
      <category term="关联分析" scheme="http://yoursite.com/tags/%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
    
      <category term="集成学习" scheme="http://yoursite.com/tags/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>算法编程知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/08/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%BC%96%E7%A8%8B/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T17:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对算法编程基础知识进行梳理、回顾，以及一些常见的算法掌握。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#算法编程">算法编程</a><ul><li><a href="#1-反转链表">1. 反转链表</a></li><li><a href="#2-dfs">2. DFS</a></li><li><a href="#3-bfs">3. BFS</a></li><li><a href="#4-二分查找">4. 二分查找</a></li><li><a href="#5-快排">5. 快排</a></li><li><a href="#6-求最大树深">6. 求最大树深</a></li><li><a href="#7-动态规划问题">7. 动态规划问题</a></li><li><a href="#8-01背包问题">8. 01背包问题</a></li></ul></li></ul><!-- /TOC --></div><h1 id="算法编程"><a href="#算法编程" class="headerlink" title="算法编程"></a>算法编程</h1><h2 id="1-反转链表"><a href="#1-反转链表" class="headerlink" title="1. 反转链表"></a>1. 反转链表</h2><h2 id="2-DFS"><a href="#2-DFS" class="headerlink" title="2. DFS"></a>2. DFS</h2><h2 id="3-BFS"><a href="#3-BFS" class="headerlink" title="3. BFS"></a>3. BFS</h2><h2 id="4-二分查找"><a href="#4-二分查找" class="headerlink" title="4. 二分查找"></a>4. 二分查找</h2><h2 id="5-快排"><a href="#5-快排" class="headerlink" title="5. 快排"></a>5. 快排</h2><h2 id="6-求最大树深"><a href="#6-求最大树深" class="headerlink" title="6. 求最大树深"></a>6. 求最大树深</h2><h2 id="7-动态规划问题"><a href="#7-动态规划问题" class="headerlink" title="7. 动态规划问题"></a>7. 动态规划问题</h2><h2 id="8-01背包问题"><a href="#8-01背包问题" class="headerlink" title="8. 01背包问题"></a>8. 01背包问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对算法编程基础知识进行梳理、回顾，以及一些常见的算法掌握。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法编程" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理知识点总结归纳</title>
    <link href="http://yoursite.com/2020/05/08/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/08/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</id>
    <published>2020-05-08T15:05:08.000Z</published>
    <updated>2020-05-13T18:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对自然语言处理基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p></blockquote><a id="more"></a><div style='display: none'><!-- TOC --><ul><li><a href="#1-情感分析">1. 情感分析</a></li><li><a href="#2-文本挖掘">2. 文本挖掘</a></li><li><a href="#3-语义分析">3. 语义分析</a></li></ul><!-- /TOC --></div><h2 id="1-情感分析"><a href="#1-情感分析" class="headerlink" title="1. 情感分析"></a>1. 情感分析</h2><h2 id="2-文本挖掘"><a href="#2-文本挖掘" class="headerlink" title="2. 文本挖掘"></a>2. 文本挖掘</h2><h2 id="3-语义分析"><a href="#3-语义分析" class="headerlink" title="3. 语义分析"></a>3. 语义分析</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要对自然语言处理基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="自然语言处理" scheme="http://yoursite.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="情感分析" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
      <category term="文本分析" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
