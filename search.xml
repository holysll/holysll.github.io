<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo使用教程与常用命令</title>
    <url>/2020/05/12/Hexo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>欢迎使用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 更多信息可以查看<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a> 。如果你在使用过程中遇到任何问题，可以在这<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">提问</a> 或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a> 上留言，这篇文章简单介绍下Hexo的使用以及常用的命令。</p>
<a id="more"></a>

<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"文章标题"</span></span><br><span class="line">或者</span><br><span class="line">$ hexo n <span class="string">"文章标题"</span></span><br></pre></td></tr></table></figure>

<p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">writing</a></p>
<h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">或者</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">或者</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>更多信息:: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><h3 id="获取主题"><a href="#获取主题" class="headerlink" title="获取主题"></a>获取主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/holysll/hexo-theme-ayer</span><br></pre></td></tr></table></figure>

<h3 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">vi _config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: hexo-theme-ayer</span><br></pre></td></tr></table></figure>

<h3 id="清除缓存并部署"><a href="#清除缓存并部署" class="headerlink" title="清除缓存并部署"></a>清除缓存并部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>GitHub</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Web与前端知识点总结归纳</title>
    <url>/2020/05/08/Web%E4%B8%8E%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对Web基础和前端框架知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#web基础">Web基础</a><ul>
<li><a href="#1-常用的网络传输协议">1. 常用的网络传输协议</a></li>
<li><a href="#2-常见的状态码">2. 常见的状态码</a></li>
<li><a href="#3-三次握手">3. 三次握手</a></li>
<li><a href="#4-四次挥手">4. 四次挥手</a></li>
</ul>
</li>
<li><a href="#django">Django</a></li>
<li><a href="#flask">Flask</a></li>
<li><a href="#tornado">Tornado</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#vue">Vue</a></li>
<li><a href="#angularjs">AngularJS</a></li>
<li><a href="#react">React</a></li>
</ul>
<!-- /TOC -->

</div>

<h1 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h1><h2 id="1-常用的网络传输协议"><a href="#1-常用的网络传输协议" class="headerlink" title="1. 常用的网络传输协议"></a>1. 常用的网络传输协议</h2><ul>
<li>TCP：传输控制协议，可靠传输，面向连接</li>
<li>UDP：用户数据包协议，不可靠传输，面向无连接</li>
<li>FTP：文件传输协议,用于上传和下载文件</li>
<li>HTTP：超文本传输协议，基于TCP/IP通信协议，面向对象</li>
<li>SMTP：邮件传输协议</li>
<li>TELNET：Internet远程登录服务的标准协议和主要方式</li>
<li>DNS：域名系统，将域名解析为ip地址</li>
</ul>
<h2 id="2-常见的状态码"><a href="#2-常见的状态码" class="headerlink" title="2. 常见的状态码"></a>2. 常见的状态码</h2><table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="left">状态</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">200</td>
<td align="left">Ok</td>
<td align="left">请求成功</td>
</tr>
<tr>
<td align="center">400</td>
<td align="left">Bad Request</td>
<td align="left">请求语法错误，不能被服务器解析</td>
</tr>
<tr>
<td align="center">401</td>
<td align="left">Unauthorized</td>
<td align="left">未经授权，需与www-Authenticate一起用</td>
</tr>
<tr>
<td align="center">403</td>
<td align="left">Forbidden</td>
<td align="left">服务器收到请求，但拒绝提供服务</td>
</tr>
<tr>
<td align="center">404</td>
<td align="left">Not Found</td>
<td align="left">请求资源不存在</td>
</tr>
<tr>
<td align="center">500</td>
<td align="left">Internal Server Error</td>
<td align="left">服务器发生不可预期的错误</td>
</tr>
<tr>
<td align="center">503</td>
<td align="left">Server Unavailable</td>
<td align="left">服务器当前请求不可用</td>
</tr>
</tbody></table>
<h2 id="3-三次握手"><a href="#3-三次握手" class="headerlink" title="3. 三次握手"></a>3. 三次握手</h2><ul>
<li>第一次握手：建立连接时，客户端发送SYN（SYN=x）到服务器，有主动打开状态进入SYN_SENT状态，等待服务器确认。</li>
<li>第二次握手：服务器收到SYN包，必须确认客户的SYN（ack=x+1）,同时自己也发送一个SYN包（syn=y），即SYN+ACK包，服务器进入SYN_RECV状态。</li>
<li>第三次握手：客户端收到服务器的SYN+ACK包，想服务器发送确认ACK包（ACK=y+1）,发送完毕，客户端和服务器进入ESTABLISHED状态，完成握手。</li>
</ul>
<h2 id="4-四次挥手"><a href="#4-四次挥手" class="headerlink" title="4. 四次挥手"></a>4. 四次挥手</h2><h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h1><h1 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h1><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1>]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>Web基础</tag>
        <tag>前端框架</tag>
        <tag>知识回顾</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统知识点总结归纳</title>
    <url>/2020/05/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对操作系统和Linux基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#操作系统">操作系统</a><ul>
<li><a href="#1-进程线程以及协程间的区别">1. 进程、线程以及协程间的区别</a></li>
<li><a href="#2-线程间通信的方式">2. 线程间通信的方式</a></li>
<li><a href="#3-进程间通信的方式">3. 进程间通信的方式</a></li>
<li><a href="#4-如何实现协程">4. 如何实现协程</a></li>
<li><a href="#5-并行与并发">5. 并行与并发</a></li>
<li><a href="#6-同步与异步">6. 同步与异步</a></li>
<li><a href="#7-阻塞与非阻塞">7. 阻塞与非阻塞</a></li>
<li><a href="#8-僵尸进程孤儿进程守护进程">8. 僵尸进程、孤儿进程、守护进程</a></li>
<li><a href="#9-线程安全">9. 线程安全</a></li>
<li><a href="#10-多线程资源竞争怎么解决">10. 多线程资源竞争，怎么解决</a></li>
<li><a href="#11-有几种锁">11. 有几种锁</a></li>
<li><a href="#12-线程池原理与实现">12. 线程池原理与实现</a></li>
<li><a href="#13-调度算法">13. 调度算法</a></li>
</ul>
</li>
<li><a href="#linux">Linux</a><ul>
<li><a href="#1-linux常用命令">1. linux常用命令</a></li>
<li><a href="#2-linux内存管理机制">2. Linux内存管理机制</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

</div>

<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="1-进程、线程以及协程间的区别"><a href="#1-进程、线程以及协程间的区别" class="headerlink" title="1. 进程、线程以及协程间的区别"></a>1. 进程、线程以及协程间的区别</h2><p><strong><a href="https://blog.csdn.net/holysll/article/details/89344794" target="_blank" rel="noopener">线程、进程、协程、锁的总结</a></strong></p>
<h2 id="2-线程间通信的方式"><a href="#2-线程间通信的方式" class="headerlink" title="2. 线程间通信的方式"></a>2. 线程间通信的方式</h2><h2 id="3-进程间通信的方式"><a href="#3-进程间通信的方式" class="headerlink" title="3. 进程间通信的方式"></a>3. 进程间通信的方式</h2><h2 id="4-如何实现协程"><a href="#4-如何实现协程" class="headerlink" title="4. 如何实现协程"></a>4. 如何实现协程</h2><h2 id="5-并行与并发"><a href="#5-并行与并发" class="headerlink" title="5. 并行与并发"></a>5. 并行与并发</h2><h2 id="6-同步与异步"><a href="#6-同步与异步" class="headerlink" title="6. 同步与异步"></a>6. 同步与异步</h2><h2 id="7-阻塞与非阻塞"><a href="#7-阻塞与非阻塞" class="headerlink" title="7. 阻塞与非阻塞"></a>7. 阻塞与非阻塞</h2><h2 id="8-僵尸进程、孤儿进程、守护进程"><a href="#8-僵尸进程、孤儿进程、守护进程" class="headerlink" title="8. 僵尸进程、孤儿进程、守护进程"></a>8. 僵尸进程、孤儿进程、守护进程</h2><h2 id="9-线程安全"><a href="#9-线程安全" class="headerlink" title="9. 线程安全"></a>9. 线程安全</h2><h2 id="10-多线程资源竞争，怎么解决"><a href="#10-多线程资源竞争，怎么解决" class="headerlink" title="10. 多线程资源竞争，怎么解决"></a>10. 多线程资源竞争，怎么解决</h2><h2 id="11-有几种锁"><a href="#11-有几种锁" class="headerlink" title="11. 有几种锁"></a>11. 有几种锁</h2><ul>
<li><p>互斥锁</p>
</li>
<li><p>可重入锁</p>
</li>
<li><p>死锁</p>
</li>
</ul>
<h2 id="12-线程池原理与实现"><a href="#12-线程池原理与实现" class="headerlink" title="12. 线程池原理与实现"></a>12. 线程池原理与实现</h2><h2 id="13-调度算法"><a href="#13-调度算法" class="headerlink" title="13. 调度算法"></a>13. 调度算法</h2><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="1-linux常用命令"><a href="#1-linux常用命令" class="headerlink" title="1. linux常用命令"></a>1. linux常用命令</h2><h2 id="2-Linux内存管理机制"><a href="#2-Linux内存管理机制" class="headerlink" title="2. Linux内存管理机制"></a>2. Linux内存管理机制</h2>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
        <tag>进程</tag>
        <tag>线程</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库知识点总结归纳</title>
    <url>/2020/05/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对数据库基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#数据库常识">数据库常识</a><ul>
<li><a href="#1-什么是索引">1. 什么是索引</a></li>
<li><a href="#2-事务的特性">2. 事务的特性</a></li>
<li><a href="#3-存储过程">3. 存储过程</a></li>
<li><a href="#4-数据库怎么优化查询效率">4. 数据库怎么优化查询效率</a></li>
<li><a href="#5-数据库优化方案">5. 数据库优化方案</a></li>
<li><a href="#6-什么是悲观锁">6. 什么是悲观锁</a></li>
<li><a href="#7-什么是乐观锁">7. 什么是乐观锁</a></li>
<li><a href="#8-什么是缓存穿透">8. 什么是缓存穿透</a></li>
<li><a href="#9-什么是缓存击穿">9. 什么是缓存击穿</a></li>
<li><a href="#10-什么是缓存雪崩">10. 什么是缓存雪崩</a></li>
<li><a href="#11-sql查询基础">11. SQL查询基础</a></li>
<li><a href="#12-排序">12. 排序</a></li>
<li><a href="#13-聚合函数">13. 聚合函数</a></li>
<li><a href="#14-分组">14. 分组</a></li>
<li><a href="#15-关联查询">15. 关联查询</a></li>
<li><a href="#16-limit的用法">16. LIMIT的用法</a></li>
<li><a href="#17-case-when">17. case when</a></li>
</ul>
</li>
<li><a href="#mysql数据库">Mysql数据库</a><ul>
<li><a href="#1-mysql-常用数据类型">1. mysql 常用数据类型</a></li>
<li><a href="#2-mysql数据库引擎">2. mysql数据库引擎</a></li>
<li><a href="#3-mysql的索引类型">3. mysql的索引类型</a></li>
<li><a href="#4-mysql-几种锁的区别">4. Mysql 几种锁的区别</a></li>
<li><a href="#5-mysql事务原理特性事务并发控制">5. mysql事务原理、特性、事务并发控制</a></li>
</ul>
</li>
<li><a href="#redis数据库">Redis数据库</a><ul>
<li><a href="#1-redis的原理">1. redis的原理</a></li>
<li><a href="#2-持久化机制">2. 持久化机制</a></li>
<li><a href="#3-redis-和-memcached-的主要区别">3. redis 和 memcached 的主要区别</a></li>
<li><a href="#4-redis-高可用">4. Redis 高可用</a></li>
<li><a href="#5-redis-高并发">5. Redis 高并发</a></li>
</ul>
</li>
<li><a href="#mongodb数据库">MongoDB数据库</a></li>
<li><a href="#hive数据库">Hive数据库</a></li>
<li><a href="#hbase数据库">Hbase数据库</a></li>
<li><a href="#hadoop生态">Hadoop生态</a></li>
</ul>
<!-- /TOC -->

</div>

<h1 id="数据库常识"><a href="#数据库常识" class="headerlink" title="数据库常识"></a>数据库常识</h1><h2 id="1-什么是索引"><a href="#1-什么是索引" class="headerlink" title="1. 什么是索引"></a>1. 什么是索引</h2><h2 id="2-事务的特性"><a href="#2-事务的特性" class="headerlink" title="2. 事务的特性"></a>2. 事务的特性</h2><ul>
<li>原子性(Atomicity)</li>
</ul>
<blockquote>
<p>事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。</p>
</blockquote>
<ul>
<li>一致性(Consistency)</li>
</ul>
<blockquote>
<p>几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。</p>
</blockquote>
<ul>
<li>隔离性(Isolation)</li>
</ul>
<blockquote>
<p>事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。</p>
</blockquote>
<ul>
<li>持久性(Durability)</li>
</ul>
<blockquote>
<p>对于任意已交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现异常。</p>
</blockquote>
<h2 id="3-存储过程"><a href="#3-存储过程" class="headerlink" title="3. 存储过程"></a>3. 存储过程</h2><h2 id="4-数据库怎么优化查询效率"><a href="#4-数据库怎么优化查询效率" class="headerlink" title="4. 数据库怎么优化查询效率"></a>4. 数据库怎么优化查询效率</h2><h2 id="5-数据库优化方案"><a href="#5-数据库优化方案" class="headerlink" title="5. 数据库优化方案"></a>5. 数据库优化方案</h2><h2 id="6-什么是悲观锁"><a href="#6-什么是悲观锁" class="headerlink" title="6. 什么是悲观锁"></a>6. 什么是悲观锁</h2><h2 id="7-什么是乐观锁"><a href="#7-什么是乐观锁" class="headerlink" title="7. 什么是乐观锁"></a>7. 什么是乐观锁</h2><h2 id="8-什么是缓存穿透"><a href="#8-什么是缓存穿透" class="headerlink" title="8. 什么是缓存穿透"></a>8. 什么是缓存穿透</h2><h2 id="9-什么是缓存击穿"><a href="#9-什么是缓存击穿" class="headerlink" title="9. 什么是缓存击穿"></a>9. 什么是缓存击穿</h2><h2 id="10-什么是缓存雪崩"><a href="#10-什么是缓存雪崩" class="headerlink" title="10. 什么是缓存雪崩"></a>10. 什么是缓存雪崩</h2><h2 id="11-SQL查询基础"><a href="#11-SQL查询基础" class="headerlink" title="11. SQL查询基础"></a>11. SQL查询基础</h2><p><strong><a href="https://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="noopener">SQL基础知识</a></strong></p>
<ul>
<li>select语句</li>
</ul>
<blockquote>
<p>格式：select 字段 from 表名； # 全部字段可以用 *</p>
</blockquote>
<ul>
<li>where 用于限制查询的结果</li>
</ul>
<blockquote>
<p>格式：where 字段=’xxx’;  # 查询条件&gt; &lt; &gt;= &lt;= = !=</p>
</blockquote>
<ul>
<li><p>与(AND)或(OR)</p>
</li>
<li><p>在(IN)不在(NOT IN)</p>
</li>
<li><p>空(NULL)非空(NOT NULL)</p>
</li>
<li><p>全部(ALL) 任一(ANY)</p>
</li>
<li><p>在[a,b]之间</p>
</li>
</ul>
<blockquote>
<p>格式：between a and b</p>
</blockquote>
<ul>
<li>排重DISTINCT</li>
</ul>
<blockquote>
<p>格式：select DISTINCT 字段 from 表名；</p>
</blockquote>
<h2 id="12-排序"><a href="#12-排序" class="headerlink" title="12. 排序"></a>12. 排序</h2><ul>
<li>ORDER BY语句</li>
</ul>
<blockquote>
<p>格式：select 字段 from 表名 where 条件 ORDER BY 字段；</p>
</blockquote>
<ul>
<li>升序(ASC)与降序(DESC)</li>
</ul>
<blockquote>
<p>格式：select 字段 from 表名 where 条件 ORDER BY 字段 ASC;<br>格式：select 字段 from 表名 where 条件 ORDER BY 字段 DESC;  </p>
</blockquote>
<ul>
<li>多项排序</li>
</ul>
<blockquote>
<p>格式：select 字段 from 表名 where 条件 ORDER BY 字段 ASC|DESC，字段ASC|DESC;</p>
</blockquote>
<h2 id="13-聚合函数"><a href="#13-聚合函数" class="headerlink" title="13. 聚合函数"></a>13. 聚合函数</h2><blockquote>
<p>把 select 语句的查询结果汇聚成一个结果，这样的函数叫聚合函数。</p>
</blockquote>
<ul>
<li><p>最大值(MAX)</p>
</li>
<li><p>最小值(MIN)</p>
</li>
<li><p>平均值(SVG)</p>
</li>
<li><p>求和(SUM)</p>
</li>
<li><p>统计数量(COUNT)</p>
</li>
</ul>
<h2 id="14-分组"><a href="#14-分组" class="headerlink" title="14. 分组"></a>14. 分组</h2><ul>
<li>GROUP BY</li>
</ul>
<blockquote>
<p>格式：select 组函数 from 表 where 条件 group by 字段;</p>
</blockquote>
<ul>
<li>HAVING 组判断条件，它的真假决定一组数据是否返回</li>
</ul>
<blockquote>
<p>格式：select 组函数 from 表 where 条件 group by 字段 having 组判断条件;</p>
</blockquote>
<h2 id="15-关联查询"><a href="#15-关联查询" class="headerlink" title="15. 关联查询"></a>15. 关联查询</h2><ul>
<li>JOIN：如果表中有至少一个匹配，则返回行  </li>
</ul>
<blockquote>
<p>格式：select * from a join b on a.id=b.id;</p>
</blockquote>
<ul>
<li>内连接(INNER JOIN)：只返回两个表中联结字段相等的行</li>
</ul>
<blockquote>
<p>格式：select * from a inner join b on a.id=b.id;  # 其中inner可以省略，等同于JOIN的用法</p>
</blockquote>
<ul>
<li>左外连接(LEFT JOIN 或 LEFT OUTER JOIN)：即使右表中没有匹配，也从左表返回所有的行</li>
</ul>
<blockquote>
<p>格式：select * from a left outer join b on a.id=b.aid;  # 其中outer可忽略</p>
</blockquote>
<ul>
<li>右外连接(RIGHT JOIN 或 RIGHT OUTER JOIN)：即使左表中没有匹配，也从右表返回所有的行</li>
</ul>
<blockquote>
<p>格式：select * from a right outer join b on a.id=b.aid;  # 其中outer可忽略</p>
</blockquote>
<ul>
<li>全连接(FULL JOIN 或 FULL OUTER JOIN): 只要其中一个表中存在匹配，就返回行。相当于左外连接+右外链接，注意mysql不支持全连接</li>
</ul>
<blockquote>
<p>格式：select * from a full outer join b on a.id=b.id。# 其中outer可忽略</p>
</blockquote>
<ul>
<li>自连接：自连接意思是把自身表当成另外一张表看待，互相关联查询，连接方式可以使用以上的内外连接，这种连接方式可以解决很多奇怪的问题。</li>
</ul>
<blockquote>
<p>格式：SELECT ab.* from a ab,a ac where ab.id&gt;ac.id</p>
</blockquote>
<h2 id="16-LIMIT的用法"><a href="#16-LIMIT的用法" class="headerlink" title="16. LIMIT的用法"></a>16. LIMIT的用法</h2><blockquote>
<p>格式：select * from student limit 10;  # 查询前10条数据，显示1-10条数据</p>
</blockquote>
<blockquote>
<p>格式：select * from student limit 1,10;  # 查询从第2行开始，累加10条id记录，共显示id为2….11</p>
</blockquote>
<blockquote>
<p>格式：select * from student limit 5,10;  # 查询从第6行开始向前加10条数据，共显示id为6,7….15  </p>
</blockquote>
<blockquote>
<p>格式：select * from student limit i,n;  # i: 为查询结果的索引值(默认从0开始),当i=0时可省略i; n: 为查询结果返回的数量</p>
</blockquote>
<h2 id="17-case-when"><a href="#17-case-when" class="headerlink" title="17. case when"></a>17. case when</h2><p><strong><a href="https://www.cnblogs.com/aipan/p/7770611.html" target="_blank" rel="noopener">CASE WHEN 及 SELECT CASE WHEN的用法</a></strong><br><strong><a href="https://www.cnblogs.com/cx-zyq/archive/2013/05/16/3082295.html" target="_blank" rel="noopener">SQL Case when 的使用方法</a></strong></p>
<ul>
<li>简单Case函数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CASE sex</span><br><span class="line">WHEN '1' THEN '男'</span><br><span class="line">WHEN '2' THEN '女'</span><br><span class="line">ELSE '其他' <span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Case搜索函数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CASE WHEN sex = '1' THEN '男'</span><br><span class="line">WHEN sex = '2' THEN '女'</span><br><span class="line">ELSE '其他' <span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>两种方式，可以实现相同的功能。简单Case函数的写法相对比较简洁，但是和Case搜索函数相比，功能方面会有些限制，比如写判断式。还有一个需要注意的问题，Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略。</p>
</blockquote>
<p><strong>实例分析：</strong></p>
<p>(1). 已知数据按照另外一种方式进行分组，分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*根据这个国家人口数据，统计亚洲和北美洲的人口数量*/</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">SUM</span>(population),</span><br><span class="line"><span class="keyword">CASE</span> country  <span class="keyword">WHEN</span> <span class="string">'中国'</span> <span class="keyword">THEN</span> <span class="string">'亚洲'</span></span><br><span class="line">  <span class="keyword">WHEN</span> <span class="string">'印度'</span> <span class="keyword">THEN</span> <span class="string">'亚洲'</span></span><br><span class="line">  <span class="keyword">WHEN</span> <span class="string">'日本'</span> <span class="keyword">THEN</span> <span class="string">'亚洲'</span></span><br><span class="line">  <span class="keyword">WHEN</span> <span class="string">'美国'</span> <span class="keyword">THEN</span> <span class="string">'北美洲'</span></span><br><span class="line">  <span class="keyword">WHEN</span> <span class="string">'加拿大'</span>  <span class="keyword">THEN</span> <span class="string">'北美洲'</span></span><br><span class="line">  <span class="keyword">WHEN</span> <span class="string">'墨西哥'</span>  <span class="keyword">THEN</span> <span class="string">'北美洲'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">FROM</span>    Table_A</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">CASE</span> country </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'中国'</span> <span class="keyword">THEN</span> <span class="string">'亚洲'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'印度'</span> <span class="keyword">THEN</span> <span class="string">'亚洲'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'日本'</span> <span class="keyword">THEN</span> <span class="string">'亚洲'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'美国'</span> <span class="keyword">THEN</span> <span class="string">'北美洲'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'加拿大'</span>   <span class="keyword">THEN</span> <span class="string">'北美洲'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'墨西哥'</span>   <span class="keyword">THEN</span> <span class="string">'北美洲'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*判断工资的等级，并统计每一等级的人数*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> salary &lt;= <span class="number">500</span> <span class="keyword">THEN</span> <span class="string">'1'</span></span><br><span class="line"><span class="keyword">WHEN</span> salary &gt; <span class="number">500</span> <span class="keyword">AND</span> salary &lt;= <span class="number">600</span>  <span class="keyword">THEN</span> <span class="string">'2'</span></span><br><span class="line"><span class="keyword">WHEN</span> salary &gt; <span class="number">600</span> <span class="keyword">AND</span> salary &lt;= <span class="number">800</span>  <span class="keyword">THEN</span> <span class="string">'3'</span></span><br><span class="line"><span class="keyword">WHEN</span> salary &gt; <span class="number">800</span> <span class="keyword">AND</span> salary &lt;= <span class="number">1000</span> <span class="keyword">THEN</span> <span class="string">'4'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span> salary_class, <span class="comment">-- 别名命名</span></span><br><span class="line"><span class="keyword">COUNT</span>(*)  <span class="keyword">FROM</span>    Table_A</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> salary &lt;= <span class="number">500</span> <span class="keyword">THEN</span> <span class="string">'1'</span></span><br><span class="line"><span class="keyword">WHEN</span> salary &gt; <span class="number">500</span> <span class="keyword">AND</span> salary &lt;= <span class="number">600</span>  <span class="keyword">THEN</span> <span class="string">'2'</span></span><br><span class="line"><span class="keyword">WHEN</span> salary &gt; <span class="number">600</span> <span class="keyword">AND</span> salary &lt;= <span class="number">800</span>  <span class="keyword">THEN</span> <span class="string">'3'</span></span><br><span class="line"><span class="keyword">WHEN</span> salary &gt; <span class="number">800</span> <span class="keyword">AND</span> salary &lt;= <span class="number">1000</span> <span class="keyword">THEN</span> <span class="string">'4'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>(2). 用一个SQL语句完成不同条件的分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*按照国家和性别进行分组*/</span></span><br><span class="line"><span class="keyword">SELECT</span> country, </span><br><span class="line"><span class="keyword">SUM</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'1'</span> <span class="keyword">THEN</span>  population <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>),  <span class="comment">--男性人口</span></span><br><span class="line"><span class="keyword">SUM</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'2'</span> <span class="keyword">THEN</span>  population <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)   <span class="comment">--女性人口</span></span><br><span class="line"><span class="keyword">FROM</span>  Table_A  <span class="keyword">GROUP</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure>

<p>(3). 在Check中使用Case函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*公司A，这个公司有个规定，女职员的工资必须高于1000块*/</span></span><br><span class="line">CONSTRAINT check_salary <span class="keyword">CHECK</span></span><br><span class="line">( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'2'</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> salary &gt; <span class="number">1000</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="number">1</span> <span class="keyword">END</span> = <span class="number">1</span> )</span><br></pre></td></tr></table></figure>

<p>(4). 根据条件有选择的UPDATE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1.工资5000以上的职员，工资减少10% */</span></span><br><span class="line"><span class="keyword">UPDATE</span> Personnel  <span class="keyword">SET</span> salary = salary * <span class="number">0.9</span>  <span class="keyword">WHERE</span> salary &gt;= <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.工资在2000到4600之间的职员，工资增加15% */</span></span><br><span class="line"><span class="keyword">UPDATE</span> Personnel  <span class="keyword">SET</span> salary = salary * <span class="number">1.15</span> <span class="keyword">WHERE</span> salary &gt;= <span class="number">2000</span> <span class="keyword">AND</span> salary &lt; <span class="number">4600</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.如果满足条件1和条件2，顺序执行则会出现问题。</span></span><br><span class="line"><span class="comment">假设有个人工资5000块。首先，按照条件1，工资减少10%，变成工资4500。</span></span><br><span class="line"><span class="comment">接下来运行第二个SQL时候，因为这个人的工资是4500在2000到4600的范围之内，需增加15%，</span></span><br><span class="line"><span class="comment">最后这个人的工资结果是5175,不但没有减少，反而增加了。</span></span><br><span class="line"><span class="comment">如果要是反过来执行，那么工资4600的人相反会变成减少工资。 </span></span><br><span class="line"><span class="comment">这里用到case when 进行不同条件的更新*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> Personnel</span><br><span class="line"><span class="keyword">SET</span> salary =</span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> salary &gt;= <span class="number">5000</span>  　                <span class="keyword">THEN</span> salary * <span class="number">0.9</span></span><br><span class="line">     <span class="keyword">WHEN</span> salary &gt;= <span class="number">2000</span> <span class="keyword">AND</span> salary &lt; <span class="number">4600</span>  <span class="keyword">THEN</span> salary * <span class="number">1.15</span></span><br><span class="line"><span class="keyword">ELSE</span> salary <span class="keyword">END</span>;  <span class="comment">-- 这行else必须写，不写会导致不符合这两个条件的工资会变成NULL</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 把主键a和b相互交换 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> SomeTable</span><br><span class="line"><span class="keyword">SET</span> p_key = <span class="keyword">CASE</span> <span class="keyword">WHEN</span> p_key = <span class="string">'a'</span>  <span class="keyword">THEN</span> <span class="string">'b'</span></span><br><span class="line"><span class="keyword">WHEN</span> p_key = <span class="string">'b'</span>  <span class="keyword">THEN</span> <span class="string">'a'</span>  <span class="keyword">ELSE</span> p_key <span class="keyword">END</span></span><br><span class="line"><span class="keyword">WHERE</span> p_key <span class="keyword">IN</span> (<span class="string">'a'</span>, <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>检查两个表数据是否一致</li>
</ul>
<blockquote>
<p>Case函数不同于DECODE函数。在Case函数中，可以使用BETWEEN,LIKE,IS NULL,IN,EXISTS等等。比如说使用IN,EXISTS，可以进行子查询，从而 实现更多的功能。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--使用IN的时候</span></span><br><span class="line"><span class="keyword">SELECT</span> keyCol,</span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> keyCol <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> keyCol <span class="keyword">FROM</span> tbl_B )  <span class="keyword">THEN</span> <span class="string">'Matched'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'Unmatched'</span> <span class="keyword">END</span> Label</span><br><span class="line"><span class="keyword">FROM</span> tbl_A;</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用EXISTS的时候</span></span><br><span class="line"><span class="keyword">SELECT</span> keyCol,</span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">EXISTS</span> ( <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_B  <span class="keyword">WHERE</span> tbl_A.keyCol = tbl_B.keyCol )  <span class="keyword">THEN</span> <span class="string">'Matched'</span>  <span class="keyword">ELSE</span> <span class="string">'Unmatched'</span> <span class="keyword">END</span> Label</span><br><span class="line"><span class="keyword">FROM</span> tbl_A;</span><br></pre></td></tr></table></figure>

<ul>
<li>在Case函数中使用合计函数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Studentclass</span></span><br><span class="line"><span class="comment">+------+----------+--------------+-----------------+</span></span><br><span class="line"><span class="comment">|std_id| class_id |  class_name  |  main_class_flg |</span></span><br><span class="line"><span class="comment">+------+----------+--------------+-----------------+</span></span><br><span class="line"><span class="comment">| 100  |    1     |     经济学    |        Y        |</span></span><br><span class="line"><span class="comment">| 100  |    2     |     历史学    |        N        |</span></span><br><span class="line"><span class="comment">| 200  |    2     |     历史学    |        N        |</span></span><br><span class="line"><span class="comment">| 200  |    3     |     考古学    |        Y        |</span></span><br><span class="line"><span class="comment">| 200  |    4     |     计算机    |        N        |</span></span><br><span class="line"><span class="comment">| 300  |    4     |     计算机    |        N        |</span></span><br><span class="line"><span class="comment">| 400  |    5     |      化学     |        N        |</span></span><br><span class="line"><span class="comment">| 500  |    6     |      数学     |        N        |</span></span><br><span class="line"><span class="comment">+------+----------+---------------+----------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--条件1：只选择了一门课程的学生, 返回那门课程的ID</span></span><br><span class="line"><span class="keyword">SELECT</span> std_id, <span class="keyword">MAX</span>(class_id) <span class="keyword">AS</span> main_class  <span class="keyword">FROM</span> Studentclass  <span class="keyword">GROUP</span> <span class="keyword">BY</span> std_id  <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--条件2：选择多门课程的学生, 返回所选的主课程ID</span></span><br><span class="line"><span class="keyword">SELECT</span> std_id, class_id <span class="keyword">AS</span> main_class  <span class="keyword">FROM</span> Studentclass  <span class="keyword">WHERE</span> main_class_flg = <span class="string">'Y'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用Case函数,满足以上两个条件</span></span><br><span class="line"><span class="keyword">SELECT</span>  std_id, </span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">COUNT</span>(*) = <span class="number">1</span>                   <span class="keyword">THEN</span> <span class="keyword">MAX</span>(class_id)</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> main_class_flg = <span class="string">'Y'</span>  <span class="keyword">THEN</span> class_id  <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span>)</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> main_class</span><br><span class="line"><span class="keyword">FROM</span> Studentclass  <span class="keyword">GROUP</span> <span class="keyword">BY</span> std_id;</span><br></pre></td></tr></table></figure>

<ul>
<li>select case when</li>
</ul>
<blockquote>
<p>select 与 case结合使用最大的好处有两点，一是在显示查询结果时可以灵活的组织格式，二是有效避免了多次对同一个表或几个表的访问。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例如表 students(id, name ,birthday, sex, grade)，要求按每个年级统计男生和女生的数量各是多少，统计结果的表头为，年级，男生数量，女生数量。如果不用select case when，为了将男女数量并列显示，统计起来非常麻烦，先确定年级信息，再根据年级取男生数和女生数，而且很容易出错。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> grade, <span class="keyword">COUNT</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="number">1</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">                            <span class="keyword">ELSE</span> <span class="literal">NULL</span></span><br><span class="line">                        <span class="keyword">END</span>) 男生数,</span><br><span class="line">               <span class="keyword">COUNT</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="number">2</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">                            <span class="keyword">ELSE</span> <span class="literal">NULL</span></span><br><span class="line">                       <span class="keyword">END</span>) 女生数</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade;</span><br></pre></td></tr></table></figure>

<h1 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h1><h2 id="1-mysql-常用数据类型"><a href="#1-mysql-常用数据类型" class="headerlink" title="1. mysql 常用数据类型"></a>1. mysql 常用数据类型</h2><h2 id="2-mysql数据库引擎"><a href="#2-mysql数据库引擎" class="headerlink" title="2. mysql数据库引擎"></a>2. mysql数据库引擎</h2><h2 id="3-mysql的索引类型"><a href="#3-mysql的索引类型" class="headerlink" title="3. mysql的索引类型"></a>3. mysql的索引类型</h2><h2 id="4-Mysql-几种锁的区别"><a href="#4-Mysql-几种锁的区别" class="headerlink" title="4. Mysql 几种锁的区别"></a>4. Mysql 几种锁的区别</h2><h2 id="5-mysql事务原理、特性、事务并发控制"><a href="#5-mysql事务原理、特性、事务并发控制" class="headerlink" title="5. mysql事务原理、特性、事务并发控制"></a>5. mysql事务原理、特性、事务并发控制</h2><h1 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h1><h2 id="1-redis的原理"><a href="#1-redis的原理" class="headerlink" title="1. redis的原理"></a>1. redis的原理</h2><h2 id="2-持久化机制"><a href="#2-持久化机制" class="headerlink" title="2. 持久化机制"></a>2. 持久化机制</h2><h2 id="3-redis-和-memcached-的主要区别"><a href="#3-redis-和-memcached-的主要区别" class="headerlink" title="3. redis 和 memcached 的主要区别"></a>3. redis 和 memcached 的主要区别</h2><h2 id="4-Redis-高可用"><a href="#4-Redis-高可用" class="headerlink" title="4. Redis 高可用"></a>4. Redis 高可用</h2><h2 id="5-Redis-高并发"><a href="#5-Redis-高并发" class="headerlink" title="5. Redis 高并发"></a>5. Redis 高并发</h2><h1 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h1><h1 id="Hive数据库"><a href="#Hive数据库" class="headerlink" title="Hive数据库"></a>Hive数据库</h1><h1 id="Hbase数据库"><a href="#Hbase数据库" class="headerlink" title="Hbase数据库"></a>Hbase数据库</h1><h1 id="Hadoop生态"><a href="#Hadoop生态" class="headerlink" title="Hadoop生态"></a>Hadoop生态</h1>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构知识点总结归纳</title>
    <url>/2020/05/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对数据结构基础知识进行梳理、回顾，解析原理，并通过实际例子深刻理解。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#数据结构">数据结构</a><ul>
<li><a href="#1-字符串string">1. 字符串(String)</a></li>
<li><a href="#2-数组array">2. 数组(Array)</a></li>
<li><a href="#3-堆heap">3. 堆(Heap)</a></li>
<li><a href="#4-栈stack">4. 栈(Stack)</a></li>
<li><a href="#5-队列queue">5. 队列(Queue)</a></li>
<li><a href="#6-链表linked-list">6. 链表(Linked-List)</a></li>
<li><a href="#7-树tree">7. 树(Tree)</a></li>
<li><a href="#8-图graph">8. 图(Graph)</a></li>
<li><a href="#9-哈希表hash">9. 哈希表(Hash)</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

</div>

<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="1-字符串-String"><a href="#1-字符串-String" class="headerlink" title="1. 字符串(String)"></a>1. 字符串(String)</h2><h2 id="2-数组-Array"><a href="#2-数组-Array" class="headerlink" title="2. 数组(Array)"></a>2. 数组(Array)</h2><h2 id="3-堆-Heap"><a href="#3-堆-Heap" class="headerlink" title="3. 堆(Heap)"></a>3. 堆(Heap)</h2><h2 id="4-栈-Stack"><a href="#4-栈-Stack" class="headerlink" title="4. 栈(Stack)"></a>4. 栈(Stack)</h2><h2 id="5-队列-Queue"><a href="#5-队列-Queue" class="headerlink" title="5. 队列(Queue)"></a>5. 队列(Queue)</h2><h2 id="6-链表-Linked-List"><a href="#6-链表-Linked-List" class="headerlink" title="6. 链表(Linked-List)"></a>6. 链表(Linked-List)</h2><h2 id="7-树-Tree"><a href="#7-树-Tree" class="headerlink" title="7. 树(Tree)"></a>7. 树(Tree)</h2><h2 id="8-图-Graph"><a href="#8-图-Graph" class="headerlink" title="8. 图(Graph)"></a>8. 图(Graph)</h2><h2 id="9-哈希表-Hash"><a href="#9-哈希表-Hash" class="headerlink" title="9. 哈希表(Hash)"></a>9. 哈希表(Hash)</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习知识点总结归纳</title>
    <url>/2020/05/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对机器学习基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#1-机器学习基础">1 机器学习基础</a><ul>
<li><a href="#11-机器学习概述">1.1 机器学习概述</a></li>
<li><a href="#12-监督学习">1.2 监督学习</a></li>
<li><a href="#13-非监督学习">1.3 非监督学习</a></li>
<li><a href="#14-增强学习">1.4 增强学习</a></li>
<li><a href="#15-深度学习">1.5 深度学习</a></li>
</ul>
</li>
<li><a href="#2-分类问题">2 分类问题</a><ul>
<li><a href="#21-knn">2.1 KNN</a></li>
<li><a href="#22-nb">2.2 NB</a></li>
<li><a href="#23-svm">2.3 SVM</a></li>
<li><a href="#24-adaboost">2.4 AdaBoost</a></li>
<li><a href="#25-dt">2.5 DT</a></li>
</ul>
</li>
<li><a href="#3-聚类分析">3 聚类分析</a><ul>
<li><a href="#31-k-means">3.1 K-means</a></li>
<li><a href="#32-dbscan">3.2 DBSCAN</a></li>
<li><a href="#33-lda">3.3 LDA</a></li>
</ul>
</li>
<li><a href="#4-预测分析">4 预测分析</a><ul>
<li><a href="#41-时间序列">4.1 时间序列</a></li>
<li><a href="#42-bp神经网络">4.2 BP神经网络</a></li>
</ul>
</li>
<li><a href="#5-关联分析">5 关联分析</a><ul>
<li><a href="#51-apriori">5.1 Apriori</a></li>
<li><a href="#52-fp-growth">5.2 FP-Growth</a></li>
</ul>
</li>
<li><a href="#6-回归分析">6 回归分析</a><ul>
<li><a href="#61-一元回归">6.1 一元回归</a></li>
<li><a href="#62-多元回归">6.2 多元回归</a></li>
<li><a href="#63-逻辑回归">6.3 逻辑回归</a></li>
</ul>
</li>
<li><a href="#7-集成学习">7 集成学习</a><ul>
<li><a href="#71-bagging">7.1 Bagging</a></li>
<li><a href="#72-随机森林">7.2. 随机森林</a></li>
<li><a href="#73-boosting">7.3 Boosting</a></li>
<li><a href="#74-adaboost">7.4 AdaBoost</a></li>
</ul>
</li>
<li><a href="#8-深度学习">8 深度学习</a><ul>
<li><a href="#81-有监督">8.1 有监督</a></li>
<li><a href="#82-无监督">8.2 无监督</a></li>
<li><a href="#83-tensorflow">8.3 TensorFlow</a></li>
<li><a href="#84-theano">8.4 Theano</a></li>
</ul>
</li>
<li><a href="#9-数据预处理">9 数据预处理</a><ul>
<li><a href="#91-数据清洗">9.1 数据清洗</a><ul>
<li><a href="#911-异常值处理">9.1.1 异常值处理</a></li>
<li><a href="#912-缺失值处理">9.1.2 缺失值处理</a></li>
<li><a href="#913-噪声处理">9.1.3 噪声处理</a></li>
<li><a href="#914-倾斜数据处理">9.1.4 倾斜数据处理</a></li>
</ul>
</li>
<li><a href="#92-数据集成">9.2 数据集成</a></li>
<li><a href="#93-数据变换">9.3 数据变换</a></li>
<li><a href="#94-数据归约">9.4 数据归约</a></li>
</ul>
</li>
<li><a href="#10-数据降维">10 数据降维</a><ul>
<li><a href="#101-主成份分析">10.1 主成份分析</a></li>
<li><a href="#102-奇异值分解">10.2 奇异值分解</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

</div>


<h1 id="1-机器学习基础"><a href="#1-机器学习基础" class="headerlink" title="1 机器学习基础"></a>1 机器学习基础</h1><h2 id="1-1-机器学习概述"><a href="#1-1-机器学习概述" class="headerlink" title="1.1 机器学习概述"></a>1.1 机器学习概述</h2><h2 id="1-2-监督学习"><a href="#1-2-监督学习" class="headerlink" title="1.2 监督学习"></a>1.2 监督学习</h2><h2 id="1-3-非监督学习"><a href="#1-3-非监督学习" class="headerlink" title="1.3 非监督学习"></a>1.3 非监督学习</h2><h2 id="1-4-增强学习"><a href="#1-4-增强学习" class="headerlink" title="1.4 增强学习"></a>1.4 增强学习</h2><h2 id="1-5-深度学习"><a href="#1-5-深度学习" class="headerlink" title="1.5 深度学习"></a>1.5 深度学习</h2><h1 id="2-分类问题"><a href="#2-分类问题" class="headerlink" title="2 分类问题"></a>2 分类问题</h1><h2 id="2-1-KNN"><a href="#2-1-KNN" class="headerlink" title="2.1 KNN"></a>2.1 KNN</h2><h2 id="2-2-NB"><a href="#2-2-NB" class="headerlink" title="2.2 NB"></a>2.2 NB</h2><h2 id="2-3-SVM"><a href="#2-3-SVM" class="headerlink" title="2.3 SVM"></a>2.3 SVM</h2><h2 id="2-4-AdaBoost"><a href="#2-4-AdaBoost" class="headerlink" title="2.4 AdaBoost"></a>2.4 AdaBoost</h2><h2 id="2-5-DT"><a href="#2-5-DT" class="headerlink" title="2.5 DT"></a>2.5 DT</h2><h1 id="3-聚类分析"><a href="#3-聚类分析" class="headerlink" title="3 聚类分析"></a>3 聚类分析</h1><h2 id="3-1-K-means"><a href="#3-1-K-means" class="headerlink" title="3.1 K-means"></a>3.1 K-means</h2><h2 id="3-2-DBSCAN"><a href="#3-2-DBSCAN" class="headerlink" title="3.2 DBSCAN"></a>3.2 DBSCAN</h2><h2 id="3-3-LDA"><a href="#3-3-LDA" class="headerlink" title="3.3 LDA"></a>3.3 LDA</h2><h1 id="4-预测分析"><a href="#4-预测分析" class="headerlink" title="4 预测分析"></a>4 预测分析</h1><h2 id="4-1-时间序列"><a href="#4-1-时间序列" class="headerlink" title="4.1 时间序列"></a>4.1 时间序列</h2><h2 id="4-2-BP神经网络"><a href="#4-2-BP神经网络" class="headerlink" title="4.2 BP神经网络"></a>4.2 BP神经网络</h2><h1 id="5-关联分析"><a href="#5-关联分析" class="headerlink" title="5 关联分析"></a>5 关联分析</h1><h2 id="5-1-Apriori"><a href="#5-1-Apriori" class="headerlink" title="5.1 Apriori"></a>5.1 Apriori</h2><h2 id="5-2-FP-Growth"><a href="#5-2-FP-Growth" class="headerlink" title="5.2 FP-Growth"></a>5.2 FP-Growth</h2><h1 id="6-回归分析"><a href="#6-回归分析" class="headerlink" title="6 回归分析"></a>6 回归分析</h1><h2 id="6-1-一元回归"><a href="#6-1-一元回归" class="headerlink" title="6.1 一元回归"></a>6.1 一元回归</h2><h2 id="6-2-多元回归"><a href="#6-2-多元回归" class="headerlink" title="6.2 多元回归"></a>6.2 多元回归</h2><h2 id="6-3-逻辑回归"><a href="#6-3-逻辑回归" class="headerlink" title="6.3 逻辑回归"></a>6.3 逻辑回归</h2><h1 id="7-集成学习"><a href="#7-集成学习" class="headerlink" title="7 集成学习"></a>7 集成学习</h1><h2 id="7-1-Bagging"><a href="#7-1-Bagging" class="headerlink" title="7.1 Bagging"></a>7.1 Bagging</h2><h2 id="7-2-随机森林"><a href="#7-2-随机森林" class="headerlink" title="7.2. 随机森林"></a>7.2. 随机森林</h2><h2 id="7-3-Boosting"><a href="#7-3-Boosting" class="headerlink" title="7.3 Boosting"></a>7.3 Boosting</h2><h2 id="7-4-AdaBoost"><a href="#7-4-AdaBoost" class="headerlink" title="7.4 AdaBoost"></a>7.4 AdaBoost</h2><h1 id="8-深度学习"><a href="#8-深度学习" class="headerlink" title="8 深度学习"></a>8 深度学习</h1><h2 id="8-1-有监督"><a href="#8-1-有监督" class="headerlink" title="8.1 有监督"></a>8.1 有监督</h2><h2 id="8-2-无监督"><a href="#8-2-无监督" class="headerlink" title="8.2 无监督"></a>8.2 无监督</h2><h2 id="8-3-TensorFlow"><a href="#8-3-TensorFlow" class="headerlink" title="8.3 TensorFlow"></a>8.3 TensorFlow</h2><h2 id="8-4-Theano"><a href="#8-4-Theano" class="headerlink" title="8.4 Theano"></a>8.4 Theano</h2><h1 id="9-数据预处理"><a href="#9-数据预处理" class="headerlink" title="9 数据预处理"></a>9 数据预处理</h1><h2 id="9-1-数据清洗"><a href="#9-1-数据清洗" class="headerlink" title="9.1 数据清洗"></a>9.1 数据清洗</h2><h3 id="9-1-1-异常值处理"><a href="#9-1-1-异常值处理" class="headerlink" title="9.1.1 异常值处理"></a>9.1.1 异常值处理</h3><h3 id="9-1-2-缺失值处理"><a href="#9-1-2-缺失值处理" class="headerlink" title="9.1.2 缺失值处理"></a>9.1.2 缺失值处理</h3><h3 id="9-1-3-噪声处理"><a href="#9-1-3-噪声处理" class="headerlink" title="9.1.3 噪声处理"></a>9.1.3 噪声处理</h3><h3 id="9-1-4-倾斜数据处理"><a href="#9-1-4-倾斜数据处理" class="headerlink" title="9.1.4 倾斜数据处理"></a>9.1.4 倾斜数据处理</h3><h2 id="9-2-数据集成"><a href="#9-2-数据集成" class="headerlink" title="9.2 数据集成"></a>9.2 数据集成</h2><h2 id="9-3-数据变换"><a href="#9-3-数据变换" class="headerlink" title="9.3 数据变换"></a>9.3 数据变换</h2><h2 id="9-4-数据归约"><a href="#9-4-数据归约" class="headerlink" title="9.4 数据归约"></a>9.4 数据归约</h2><h1 id="10-数据降维"><a href="#10-数据降维" class="headerlink" title="10 数据降维"></a>10 数据降维</h1><h2 id="10-1-主成份分析"><a href="#10-1-主成份分析" class="headerlink" title="10.1 主成份分析"></a>10.1 主成份分析</h2><h2 id="10-2-奇异值分解"><a href="#10-2-奇异值分解" class="headerlink" title="10.2 奇异值分解"></a>10.2 奇异值分解</h2>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>分类问题</tag>
        <tag>聚类分析</tag>
        <tag>预测分析</tag>
        <tag>回归分析</tag>
        <tag>关联分析</tag>
        <tag>集成学习</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>算法编程知识点总结归纳</title>
    <url>/2020/05/08/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对算法编程基础知识进行梳理、回顾，以及一些常见的算法掌握。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#算法编程">算法编程</a><ul>
<li><a href="#1-反转链表">1. 反转链表</a></li>
<li><a href="#2-dfs">2. DFS</a></li>
<li><a href="#3-bfs">3. BFS</a></li>
<li><a href="#4-冒泡排序">4. 冒泡排序</a></li>
<li><a href="#5-快排">5. 快排</a></li>
<li><a href="#6-堆排序">6. 堆排序</a></li>
<li><a href="#7-二叉树">7. 二叉树</a></li>
<li><a href="#8-二分查找">8. 二分查找</a></li>
<li><a href="#9-求最大树深">9. 求最大树深</a></li>
<li><a href="#10-动态规划问题">10. 动态规划问题</a></li>
<li><a href="#11-01背包问题">11. 01背包问题</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

</div>

<h1 id="算法编程"><a href="#算法编程" class="headerlink" title="算法编程"></a>算法编程</h1><h2 id="1-反转链表"><a href="#1-反转链表" class="headerlink" title="1. 反转链表"></a>1. 反转链表</h2><h2 id="2-DFS"><a href="#2-DFS" class="headerlink" title="2. DFS"></a>2. DFS</h2><h2 id="3-BFS"><a href="#3-BFS" class="headerlink" title="3. BFS"></a>3. BFS</h2><h2 id="4-冒泡排序"><a href="#4-冒泡排序" class="headerlink" title="4. 冒泡排序"></a>4. 冒泡排序</h2><h2 id="5-快排"><a href="#5-快排" class="headerlink" title="5. 快排"></a>5. 快排</h2><h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6. 堆排序"></a>6. 堆排序</h2><h2 id="7-二叉树"><a href="#7-二叉树" class="headerlink" title="7. 二叉树"></a>7. 二叉树</h2><h2 id="8-二分查找"><a href="#8-二分查找" class="headerlink" title="8. 二分查找"></a>8. 二分查找</h2><h2 id="9-求最大树深"><a href="#9-求最大树深" class="headerlink" title="9. 求最大树深"></a>9. 求最大树深</h2><h2 id="10-动态规划问题"><a href="#10-动态规划问题" class="headerlink" title="10. 动态规划问题"></a>10. 动态规划问题</h2><h2 id="11-01背包问题"><a href="#11-01背包问题" class="headerlink" title="11. 01背包问题"></a>11. 01背包问题</h2><h2 id="12-两个栈实现一个队列"><a href="#12-两个栈实现一个队列" class="headerlink" title="12. 两个栈实现一个队列"></a>12. 两个栈实现一个队列</h2><h2 id="13-二叉树的直径"><a href="#13-二叉树的直径" class="headerlink" title="13. 二叉树的直径"></a>13. 二叉树的直径</h2><h2 id="14-全排列"><a href="#14-全排列" class="headerlink" title="14. 全排列"></a>14. 全排列</h2><ul>
<li>itertools内置permutations方法实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            n = int(input().strip())</span><br><span class="line">            s = [str(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">            res = list(permutations(s))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                print(<span class="string">" "</span>.join(i))</span><br><span class="line">            print(len(res))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    func()</span><br></pre></td></tr></table></figure>

<ul>
<li>递归实现</li>
</ul>
<p>具体详细的思路参考：</p>
<p><strong><a href="https://blog.csdn.net/weixin_39910711/article/details/100692318" target="_blank" rel="noopener">递归实现全排列（回溯思想）</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(s, begin, end)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> begin == end:</span><br><span class="line">        print(<span class="string">" "</span>.join(s))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(begin, end):</span><br><span class="line">            s[i], s[begin] = s[begin], s[i]</span><br><span class="line">            permutations(s, begin + <span class="number">1</span>, end)</span><br><span class="line">            s[i], s[begin] = s[begin], s[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = [str(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(int(input().strip()))]</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    permutations(s, <span class="number">0</span>, len(s))</span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure>

<ul>
<li>DFS实现</li>
</ul>
<p><strong><a href="https://blog.csdn.net/weixin_39910711/article/details/100692318" target="_blank" rel="noopener">深度优先搜索（DFS）实现全排列</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(s, position, visit, num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> position == len(s):</span><br><span class="line">        print(<span class="string">" "</span>.join(num))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> visit[index] == <span class="literal">True</span>:</span><br><span class="line">                num[position] = s[index]</span><br><span class="line">                visit[index] = <span class="literal">False</span></span><br><span class="line">                permutations(s, position + <span class="number">1</span>, visit, num)</span><br><span class="line">                visit[index] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    n = int(input().strip())</span><br><span class="line">    s = [str(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    visit = [<span class="literal">True</span>] * n</span><br><span class="line">    num = [<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    permutations(s, <span class="number">0</span>, visit, num)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>自然语言处理知识点总结归纳</title>
    <url>/2020/05/08/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对自然语言处理基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#1-情感分析">1. 情感分析</a></li>
<li><a href="#2-文本挖掘">2. 文本挖掘</a></li>
<li><a href="#3-语义分析">3. 语义分析</a></li>
</ul>
<!-- /TOC -->

</div>

<h2 id="1-情感分析"><a href="#1-情感分析" class="headerlink" title="1. 情感分析"></a>1. 情感分析</h2><h2 id="2-文本挖掘"><a href="#2-文本挖掘" class="headerlink" title="2. 文本挖掘"></a>2. 文本挖掘</h2><h2 id="3-语义分析"><a href="#3-语义分析" class="headerlink" title="3. 语义分析"></a>3. 语义分析</h2>]]></content>
      <categories>
        <category>自然语言处理</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>情感分析</tag>
        <tag>文本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言知识点总结归纳</title>
    <url>/2020/05/08/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>本文主要对python语言基础知识进行梳理、回顾，把一些需要记住的概念原理，和容易混淆，晦涩的知识点进行归纳。</p>
</blockquote>
<a id="more"></a>

<div style='display: none'>

<!-- TOC -->

<ul>
<li><a href="#1-python语言的特性">1. Python语言的特性</a></li>
<li><a href="#2-python语言相比其他语言的优点和缺点">2. python语言相比其他语言的优点和缺点</a></li>
<li><a href="#3-python中的元类metaclass">3. python中的元类metaclass</a></li>
<li><a href="#4-staticmethod和classmethod和实例方法">4. @staticmethod和@classmethod和实例方法</a></li>
<li><a href="#5-单例模式">5. 单例模式</a></li>
<li><a href="#6-python常用库">6. python常用库</a></li>
<li><a href="#7-python中的类型转换">7. python中的类型转换</a></li>
<li><a href="#8-文件流操作">8. 文件流操作</a></li>
<li><a href="#9-__new__-和-__init__的区别">9. <strong>new</strong> 和 <strong>init</strong>的区别</a></li>
<li><a href="#10-python内存管理与垃圾回收机制">10. python内存管理与垃圾回收机制</a></li>
<li><a href="#11-python2x-与python3x的主要区别">11. python2.x 与python3.x的主要区别</a></li>
<li><a href="#12-如何将python2的代码迁移到python3">12. 如何将python2的代码迁移到python3</a></li>
<li><a href="#13-python新式类和旧式类的区别">13. python新式类和旧式类的区别</a></li>
<li><a href="#14-鸭子类型">14. 鸭子类型</a></li>
<li><a href="#15-python自省">15. python自省</a></li>
<li><a href="#16-猴子补丁技术">16. 猴子补丁技术</a></li>
<li><a href="#17-python语法糖有哪些">17. python语法糖有哪些</a></li>
<li><a href="#18-迭代器和生成器">18. 迭代器和生成器</a></li>
<li><a href="#19-闭包">19. 闭包</a></li>
<li><a href="#20-装饰器">20. 装饰器</a></li>
<li><a href="#21-浅拷贝与深拷贝">21. 浅拷贝与深拷贝</a></li>
<li><a href="#22-设计模式">22. 设计模式</a></li>
<li><a href="#23-gil全局解释器锁">23. GIL全局解释器锁</a></li>
<li><a href="#24-python新式类和旧式类的区别">24. python新式类和旧式类的区别</a></li>
<li><a href="#25-函数与方法的区别">25. 函数与方法的区别</a></li>
<li><a href="#26-range与xrange的区别">26. range与Xrange的区别</a></li>
<li><a href="#27-search与match的区别">27. search与match的区别</a></li>
<li><a href="#28-继承">28. 继承</a></li>
<li><a href="#29-多态与多态性">29. 多态与多态性</a></li>
<li><a href="#30-numpy与scipy的区别">30. Numpy与Scipy的区别</a></li>
<li><a href="#31-函数式编程">31. 函数式编程</a></li>
<li><a href="#32-面向对象编程oop">32. 面向对象编程OOP</a></li>
<li><a href="#33-面向切面编程aop">33. 面向切面编程AOP</a></li>
<li><a href="#34-元编程">34. 元编程</a></li>
<li><a href="#35-捕获异常">35. 捕获异常</a></li>
<li><a href="#36-python中如何进行异常处理如何自定义一个异常类">36. python中如何进行异常处理，如何自定义一个异常类</a></li>
<li><a href="#37-python内置数据结构">37. python内置数据结构</a></li>
<li><a href="#38-python中函数和方法有什么区别">38. python中函数和方法有什么区别</a></li>
<li><a href="#39-python中参数类型有哪些">39. python中参数类型有哪些</a></li>
<li><a href="#40-python中函数传参过程">40. python中函数传参过程</a></li>
<li><a href="#41-args和kwargs">41. <em>args和*</em>kwargs</a></li>
<li><a href="#42-实参和形参的区别">42. 实参和形参的区别</a></li>
<li><a href="#43-python中可变对象和不可变对象">43. python中可变对象和不可变对象</a></li>
<li><a href="#44-lambda函数">44. lambda函数</a></li>
<li><a href="#45-python中正则使用方式">45. python中正则使用方式</a></li>
<li><a href="#46-python中重载">46. python中重载</a></li>
<li><a href="#47-python中反射机制">47. python中反射机制</a></li>
<li><a href="#48-python中如何管理依赖">48. python中如何管理依赖</a></li>
<li><a href="#49-如何分析python代码性能">49. 如何分析python代码性能</a></li>
<li><a href="#50-列表的线性访问和随机访问">50. 列表的线性访问和随机访问</a></li>
<li><a href="#51-python中的高阶函数">51. python中的高阶函数</a></li>
<li><a href="#52-python中单下划线和双下划线">52. Python中单下划线和双下划线</a></li>
<li><a href="#53-python的作用域以及python搜索变量的顺序">53. Python的作用域以及Python搜索变量的顺序</a></li>
<li><a href="#54-编码与解码">54. 编码与解码</a></li>
<li><a href="#55-字符串格式化">55. 字符串格式化</a></li>
<li><a href="#56-增量赋值">56. 增量赋值</a></li>
<li><a href="#57-字典推导式">57. 字典推导式</a></li>
<li><a href="#58-exec对字符串执行和eval对字符串求值">58. exec对字符串执行和eval对字符串求值</a></li>
<li><a href="#59-raise语句的作用">59. raise语句的作用</a></li>
<li><a href="#60-yeild语句的作用">60. yeild语句的作用</a></li>
<li><a href="#61-socket编程">61. socket编程</a></li>
<li><a href="#62-urllib和urllib2">62. urllib和urllib2</a></li>
<li><a href="#63-requests">63. requests</a></li>
<li><a href="#64-beautiful-soup">64. Beautiful Soup</a></li>
<li><a href="#65-selectpoll和epoll">65. select,poll和epoll</a></li>
<li><a href="#66-python中实现io多路复用">66. python中实现IO多路复用</a></li>
<li><a href="#67-python常用的并发网络库">67. python常用的并发网络库</a></li>
</ul>
<!-- /TOC -->

</div>

<h2 id="1-Python语言的特性"><a href="#1-Python语言的特性" class="headerlink" title="1. Python语言的特性"></a>1. Python语言的特性</h2><p>   Python是一种解释型语言，不需要再运行之前进行编译。<br>   Python是一种动态类型语言，不需要声明变量的类型。<br>   python适合面向对象编程，允许类的定义以及组合和继承。  </p>
<h2 id="2-python语言相比其他语言的优点和缺点"><a href="#2-python语言相比其他语言的优点和缺点" class="headerlink" title="2. python语言相比其他语言的优点和缺点"></a>2. python语言相比其他语言的优点和缺点</h2><p><strong>优点</strong>  </p>
<ul>
<li>简单易懂，灵活简洁</li>
<li>强大的标准库和三方库</li>
<li>活跃的社区，许多开源项目</li>
<li>开发效率高，迭代便捷</li>
<li>应用领域广泛，Web开发、网络编程、自动化运维、Linux系统管理、数据分析、科学计算、人工智能、机器学习</li>
</ul>
<p><strong>缺点</strong>  </p>
<ul>
<li>执行效率较差,</li>
<li>异步生态不完善，相关的库较少(tornado)</li>
<li>GIL的存在，无法充分利用多核的特性</li>
</ul>
<h2 id="3-python中的元类metaclass"><a href="#3-python中的元类metaclass" class="headerlink" title="3. python中的元类metaclass"></a>3. python中的元类metaclass</h2><blockquote>
<p>不会很常用，在ORM这种复杂结构中晦遇到，同时在看一些框架源代码的过程中可能会遇到很多元类的实例，看起来很晦涩。推荐<a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python" target="_blank" rel="noopener">Stack overflow</a> 一些专业解答，也可以参考下<a href="https://www.cnblogs.com/tkqasn/p/6524879.html" target="_blank" rel="noopener">这篇博客</a>的深刻理解，很详细。</p>
</blockquote>
<ul>
<li><strong>str是用来创建字符串对象的类</strong></li>
<li><strong>int是用来创建整数对象的类</strong></li>
<li><strong>type就是创建类对象的类</strong></li>
</ul>
<blockquote>
<p>通过type函数动态创建类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># type的语法</span></span><br><span class="line">type(class_name, class_parents, class_attr_dict)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    class_name: 类名</span></span><br><span class="line"><span class="string">    class_parents: 父类的元组(针对集成的情况，可为空)</span></span><br><span class="line"><span class="string">    class_attr_dict: 包函属性的字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    MyClass = type(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'foo'</span>:<span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>元类：就是能够创建python中类这种对象的东西，如type就是Python的内建元类</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MyClass = MetaClass()  <span class="comment"># 元类的创建</span></span><br><span class="line">my_class = MyClass()  <span class="comment"># 类的实例</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际上Myclass就是通过type()来创建出的MyClass类，它是type()类的一个实例。<br>同时，MyClass本身也是累，也可以创建自己的实例my_class。</p>
</blockquote>
<ul>
<li><strong><strong>metaclass</strong></strong></li>
</ul>
<blockquote>
<p>可以再写一个类的时候为其添加<strong>metaclass</strong>属性，这样就定义了这个类的元类。<strong>metaclass</strong>实际上可以被任意调用，它并不需要是一个正式的类。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = something</span><br><span class="line"></span><br><span class="line"><span class="comment"># py3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=something)</span>:</span></span><br><span class="line">    __metaclass__ = something</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>自定义元类</strong></li>
</ul>
<blockquote>
<p>元类的主要目的为了当创建类时能够自动改变类，通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。</p>
</blockquote>
<ul>
<li>可以使用函数当做元类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元类通常会将你传给type的参数作为自己的参数传入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_attr</span><span class="params">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">    <span class="string">"""返回一个类对象，将属性都转为大写形式"""</span></span><br><span class="line">    <span class="comment"># 选择所有不以'__'开头的属性</span></span><br><span class="line">    attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</span><br><span class="line">    <span class="comment"># 将他们转化为大写形式</span></span><br><span class="line">    uppercase_attr = dict&#123;(name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs&#125;</span><br><span class="line">    <span class="comment"># 通过type来做类对象的创建</span></span><br><span class="line">    <span class="keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)  <span class="comment"># 返回一个对象，这个对象是个类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=upper_attr)</span>:</span></span><br><span class="line">    _metaclass__ = upper_attr</span><br><span class="line">    bar = <span class="string">'bip'</span></span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, <span class="string">'bar'</span>))  <span class="comment"># False</span></span><br><span class="line">print(hasattr(Foo, <span class="string">'BAR'</span>))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">print(f.BAR)  <span class="comment"># 'bip'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用class来当做元类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.starswith(<span class="string">'__'</span>))</span><br><span class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复用type.__new__方法，OOP编程。</span></span><br><span class="line">    <span class="comment"># 由于type是元类也是类，本身也是通过__new__方法生成实例，只不过这个实例是一个类。</span></span><br><span class="line">    <span class="keyword">return</span> tpye.__new__(upperattr_metaclass, future_classs_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>真实业务场景下的元类</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, dct)</span>:</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</span><br><span class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># supper继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, dct)</span>:</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</span><br><span class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line">        <span class="keyword">return</span> supper(UpperAttrMetaClass, cls).__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>使用元类创建ORM实例</strong></li>
</ul>
<blockquote>
<p>熟悉Django框架的，应该知道ORM结构，元类创建API，使得调用简洁明了。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 1.定义Field类，用于保存数据表的字段名和字段类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, column_type)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义元类，控制Model对象的创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="string">"""定义元类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">'Model'</span>:</span><br><span class="line">            <span class="keyword">return</span> super(ModelMetaClass, cls).__new__(cls, name, bases, attrs)</span><br><span class="line">        mappings = dict()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.iteritems():</span><br><span class="line">            <span class="comment"># 保存类属性和列的映射关系到mappings字典</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(v, Field):</span><br><span class="line">              print(<span class="string">'Found mapping: %s==&gt;%s'</span> % (k, v))</span><br><span class="line">             mappings[k] = v</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mapping.iterkeys():</span><br><span class="line">            <span class="comment"># 将雷属性移除，是定义的类字段不污染User类属性，只在实例中可以访问这些key</span></span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        <span class="comment"># 假设表名为类名的小写，创建类时添加一个__table__类属性</span></span><br><span class="line">        attrs[<span class="string">'__table__'</span>] = name.lower()</span><br><span class="line">        <span class="comment"># 保存属性和列的映射关系，创建类时添加一个__mappings__类属性</span></span><br><span class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings</span><br><span class="line">        <span class="keyword">return</span> super(ModelMetaClass, cls).__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Model基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict)</span>:</span></span><br><span class="line">    __metaclass__ = ModelMetaClass</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s'"</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.iteritems():</span><br><span class="line">            fields.append(v,name)</span><br><span class="line">            params.append(<span class="string">'?'</span>)</span><br><span class="line">            args.append(getattr(self, k,<span class="literal">None</span>))</span><br><span class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</span><br><span class="line">        print(<span class="string">'SQL: %s'</span> % sql)</span><br><span class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个model，用户表User，定义数据字段就可实现数据表和字段的操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>：</span></span><br><span class="line">    id = IntegerField('id')  # 对应数据表的id字段</span><br><span class="line">    name = StringField(<span class="string">'username'</span>)  <span class="comment"># 对应数据表的username字段</span></span><br><span class="line">    email = StringField(<span class="string">'email'</span>)  <span class="comment"># 对应数据表的email字段</span></span><br><span class="line">    password = StringField(<span class="string">'password'</span>)  <span class="comment"># 对应数据表的password字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例</span></span><br><span class="line">user = User(id=<span class="number">123456</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@163.com'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># 保存数据库</span></span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure>

<h2 id="4-staticmethod和-classmethod和实例方法"><a href="#4-staticmethod和-classmethod和实例方法" class="headerlink" title="4. @staticmethod和@classmethod和实例方法"></a>4. @staticmethod和@classmethod和实例方法</h2><blockquote>
<p><strong><a href="https://stackoverflow.com/questions/136097/difference-between-staticmethod-and-classmethod" target="_blank" rel="noopener">what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></strong></p>
</blockquote>
<blockquote>
<p><strong><a href="https://realpython.com/instance-class-and-static-methods-demystified/" target="_blank" rel="noopener">real python上详细知识</a></strong></p>
</blockquote>
<ul>
<li><strong>静态方法</strong></li>
</ul>
<blockquote>
<p>静态方法：其实和普通的方法一样，不需要对谁进行绑定，必须有@staticmethod修饰，类和实例都可以访问静态方法，调用方式A。static_foo(x)和a.static_foo(x)。</p>
</blockquote>
<ul>
<li><strong>类方法</strong></li>
</ul>
<blockquote>
<p>类方法：即在类里定义的函数方法，需要@classmethod修饰，并且有个隐藏参数cls，传递的是类而不是实例，类可以访问类方法，也可以访问实例方法，访问实例方法时必须带参数self。</p>
</blockquote>
<ul>
<li><strong>实例方法</strong></li>
</ul>
<blockquote>
<p>实例方法的调用离不开实例，必须有个参数self，把实例自己传给函数，调用是够是a.foo(x)与foo(a, x)等价。实例可以访问实例方法，也可以访问类方法。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>：</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"executing foo(%s)"</span> % <span class="params">(x)</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        print(<span class="string">"executing foo(%s, %s)"</span> % (self, x))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls, x)</span>:</span></span><br><span class="line">      print(<span class="string">"executing foo(%s, %s)"</span> % (cls, x)<span class="string">")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 静态方法</span></span><br><span class="line"><span class="string">    @staticmethod</span></span><br><span class="line"><span class="string">    def static_foo(x):</span></span><br><span class="line"><span class="string">      print("</span>executing foo(%s)<span class="string">" % x)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a = A()</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">实例/类</th>
<th align="center">实例方法</th>
<th align="center">类方法</th>
<th align="center">静态方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实例: a = A()</td>
<td align="center">a.foo(x)</td>
<td align="center">a.class_foo(x)</td>
<td align="center">a.static_foo(x)</td>
</tr>
<tr>
<td align="center">类: A</td>
<td align="center">不可用</td>
<td align="center">A.class_foo(x)</td>
<td align="center">A.static_foo(x)</td>
</tr>
</tbody></table>
<h2 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5. 单例模式"></a>5. 单例模式</h2><ul>
<li><strong>使用<strong>new</strong>方法</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            orig = super(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>共享属性</strong></li>
</ul>
<blockquote>
<p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典,这样它们具有相同的属性和方法.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span><span class="params">(object)</span>:</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        ob = super(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> ob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span><span class="params">(Borg)</span>:</span></span><br><span class="line">  a = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>装饰器版本</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">   ···</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>import方法</strong></li>
</ul>
<blockquote>
<p>作为python的模块是天然的单例模式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysingleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_singleton = My_Singleton()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to use</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"></span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>元类实现单例</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过__init__方法实现元类（优雅）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"__init__"</span>)</span><br><span class="line">        self.__instance = <span class="literal">None</span></span><br><span class="line">        super(Singleton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"__call__"</span>)</span><br><span class="line">        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.__instance = super(Singleton, self).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    __metaclass__ = Singleton</span><br><span class="line"></span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line">print(Foo.__dict__)</span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过元类的__new__方法实现元类（为了实例增加属性重写__new__方法，不推荐）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">"__new__"</span>)</span><br><span class="line">        attrs[<span class="string">"_instance"</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> super(Singleton, cls).__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"__call__"</span>)</span><br><span class="line">        <span class="keyword">if</span> self._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._instance = super(Singleton, self).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">   __metaclass__ = Singleton</span><br><span class="line"></span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line">print(Foo.__dict__)</span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2)</span><br></pre></td></tr></table></figure>

<p><strong><a href="http://python.jobbole.com/87294/" target="_blank" rel="noopener">单例模式伯乐在线详细解释</a></strong></p>
<h2 id="6-python常用库"><a href="#6-python常用库" class="headerlink" title="6. python常用库"></a>6. python常用库</h2><ul>
<li><p><strong>标准库</strong></p>
<p><strong><a href="https://www.cnblogs.com/haochengdu/p/8855028.html" target="_blank" rel="noopener">网友总结参考</a></strong></p>
<p><strong><a href="https://docs.python.org/zh-cn/3.8/library/index.html" target="_blank" rel="noopener">官网中文参考</a></strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os：提供了不少于操作系统相关联的函数  </span><br><span class="line"></span><br><span class="line">sys：通常用于命令行参数</span><br><span class="line"></span><br><span class="line">res：正则表达式操作</span><br><span class="line"></span><br><span class="line">math：数学运算</span><br><span class="line"></span><br><span class="line">decimal：十进制定点和浮点运算</span><br><span class="line"></span><br><span class="line">datetime：日期时间</span><br><span class="line"></span><br><span class="line">collections：容器数据类型</span><br><span class="line"></span><br><span class="line">json：JSON 编码和解码器</span><br><span class="line"></span><br><span class="line">base64：Base16, Base32, Base64, Base85 数据编码</span><br><span class="line">heapq：堆队列算法</span><br><span class="line"></span><br><span class="line">copy：复制</span><br><span class="line"></span><br><span class="line">threading：基于线程的并行</span><br><span class="line"></span><br><span class="line">multiprocessing：基于进程的并行</span><br><span class="line"></span><br><span class="line">subprocess：子进程管理</span><br><span class="line"></span><br><span class="line">queue：一个同步的队列类</span><br><span class="line"></span><br><span class="line">random：生成伪随机数</span><br><span class="line"></span><br><span class="line">pprint：数据美化输出</span><br><span class="line"></span><br><span class="line">itertools：为高效循环而创建迭代器的函数</span><br><span class="line"></span><br><span class="line">functools：高阶函数和可调用对象上的操作</span><br><span class="line"></span><br><span class="line">operator：标准运算符替代函数</span><br><span class="line"></span><br><span class="line">logging：Python 的日志记录工具</span><br><span class="line"></span><br><span class="line">hashlib：安全哈希与消息摘要</span><br><span class="line"></span><br><span class="line">pickle：Python 对象序列化</span><br><span class="line"></span><br><span class="line">html.parser：简单的 HTML 和 XHTML 解析器</span><br><span class="line"></span><br><span class="line">urllib：URL 处理模块</span><br><span class="line"></span><br><span class="line">traceback：打印或检索堆栈回溯</span><br><span class="line"></span><br><span class="line">__future__：Future 语句定义</span><br><span class="line"></span><br><span class="line">gc：垃圾回收器接口</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>科学计算与数据分析库</strong></p>
<blockquote>
<p>numpy：科学计算包，支持N维数组运算、处理大型矩阵、成熟的广播函数库、矢量运算、线性代数、傅里叶变换、随机数生成，并可与C++/Fortran语言无缝结合。</p>
</blockquote>
<blockquote>
<p>scipy：建立在NumPy基础上，它是离散傅立叶变换、线性代数、优化和稀疏矩阵等多种高级科学和工程模块最有用的库之一。</p>
</blockquote>
<blockquote>
<p>pandas：主要用于结构化数据的运算和操作，广泛用于数据整理和预处理，其有助于提高Python在数据科学社区的使用。</p>
</blockquote>
<blockquote>
<p>matplotlib：主要用于绘制各种各样的图形，从直方图到线图、热力图，还可以使用Latex命令在图像中添加数学符号。</p>
</blockquote>
<blockquote>
<p>Scikit：主要用于机器学习，该库建立在NumPy、SciPy和matplotlib基础上，包含许多有效的机器学习和统计建模工具，如分类、回归、聚类和降维。</p>
</blockquote>
<blockquote>
<p>Statsmodels：用于统计建模，是一个Python中提供用户探索数据、估计统计模型和执行统计测试的模组。可用于不同类型数据的描述性统计，统计测试，绘图功能和结果统计。</p>
</blockquote>
<blockquote>
<p>Seaborn：用于数据可视化，是一个用于在Python中制作有吸引力和翔实的统计图形库。它是基于matplotlib。Seaborn旨在使可视化成为探索和理解数据的核心组成。  </p>
</blockquote>
<blockquote>
<p>Bokeh：用于在现代网络浏览器上创建交互式图表，仪表盘和数据应用程序。它赋予用户以D3.js的风格生成优雅简洁的图形。此外，它具有超大型或流式数据集的高性能交互能力。</p>
</blockquote>
<blockquote>
<p>Blaze: 将Numpy和Pandas的能力扩展到分布式和流式传输数据集。它可以用于从众多来源包括Bcolz，MongDB,SQLAlchemy,Apache Spark,PyTables等访问数据，与Bokeh一起，可以作为在矩形数据模块上创建有效可视化和仪表盘的强大的工具。</p>
</blockquote>
<blockquote>
<p>Sympy：用于符号计算，具有从基本算数符号到微积分、袋鼠、离散数学和量子物理学的广泛能力，另一个有用的功能是将计算结果格式化为LaTeX代码。</p>
</blockquote>
</li>
<li><p><strong>第三方库</strong></p>
<blockquote>
<p>pymysqldb：是在 Python2.x 版本中用于连接 MySQL 服务器的一个库，导包：import MySQLdb。</p>
</blockquote>
<blockquote>
<p>PyMySQL：是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，导包：import pymysql，当要向下兼容python2时,可以加上：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个连接对象，再使用创建游标</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'1234'</span>, db=<span class="string">'mysql'</span>)</span><br><span class="line">cursor = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个SQL语句</span></span><br><span class="line">sql = <span class="string">"select * from user"</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从游标中取出所有记录放到一个序列中并关闭游标</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">print(result)</span><br><span class="line">cursor.close()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>djano：是一个高层次的web开发框架，特点是开发快、代码少。可扩展性强。采用MTV（Model、Template、View）模型组织资源，框架功能丰富，模板扩展选择最多。</p>
</blockquote>
<blockquote>
<p>flask： 是一个web开发的微框架，严格来说，它仅仅提供web服务器支持，不提供全栈开发支持。然而，Flask非常轻量、非常简单，特别适合小微原型系统的开发，耗时少，开发效率高。  </p>
</blockquote>
<blockquote>
<p>Tornado：是一个基于异步网络功能库的Web开发框架，能够支持几万个开放连接，Web服务比较稳定。比较适合高并发场景下的Web系统，如秒杀系统、抢票系统等，灵活性较差。</p>
</blockquote>
<blockquote>
<p>Falcon：是一个支持大规模微服务API或移动App后端响应的web开发框架，它完全基于python并提供了非常高性能、可靠性和可扩展性。</p>
</blockquote>
<blockquote>
<p>Pyramid：是一个扩展性很强且灵活的web开发框架，上手十分容易，比较适合中等规模且边开发边设计的场景。它不提供绝对严格的框架定义，根据需求可以扩展开发，对高阶程序员十分友好。</p>
</blockquote>
<blockquote>
<p>Quart：是面向ASGI(异步服务器网关接口)开发的web为框架，采用Flask兼容的API接口，提供非常轻量级的开发方式。</p>
</blockquote>
<blockquote>
<p>requests：用于Web访问，类似于python标准库的urllib2，更容易更方便上手，适合初学者。</p>
</blockquote>
<blockquote>
<p>scrapy： 用于网络爬虫，它是获取特定模式数据的非常有用的框架，从网站首页URL开始,然后挖掘网站内的网页内容来手机信息。</p>
</blockquote>
<blockquote>
<p>selenium：是一个用于测试网站的自动化工具，支持Chrome、Firefox、Safari等主流界面浏览器，同时也支持PhantomJS无界面浏览器。</p>
</blockquote>
<blockquote>
<p>celery：是一个由python编写的简单、灵活、可靠的用于处理大量信息的分布式系统，它同时提供操作和维护分布式所需的工具，专注于实时任务，支持任务调度。是一个分布式队列管理工具，可以用celery提供接口快速实现并管理一个分布式任务队列。</p>
</blockquote>
</li>
</ul>
<h2 id="7-python中的类型转换"><a href="#7-python中的类型转换" class="headerlink" title="7. python中的类型转换"></a>7. python中的类型转换</h2><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th></th>
<th>函数</th>
<th>作用</th>
<th></th>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>int()</td>
<td>转整型</td>
<td></td>
<td>list()</td>
<td>转列表</td>
<td></td>
<td>bin()</td>
<td>整数转2进制</td>
</tr>
<tr>
<td>float()</td>
<td>转浮点型</td>
<td></td>
<td>dict()</td>
<td>转字典</td>
<td></td>
<td>oct()</td>
<td>整数转6进制</td>
</tr>
<tr>
<td>str()</td>
<td>转字符串</td>
<td></td>
<td>set()</td>
<td>转集合</td>
<td></td>
<td>hex()</td>
<td>整数转16进制</td>
</tr>
<tr>
<td>ord()</td>
<td>字符转整数</td>
<td></td>
<td>tuple()</td>
<td>转元组</td>
<td></td>
<td>complex()</td>
<td>实数转复数</td>
</tr>
</tbody></table>
<h2 id="8-文件流操作"><a href="#8-文件流操作" class="headerlink" title="8. 文件流操作"></a>8. 文件流操作</h2><ul>
<li><strong>打开文件</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=open(<span class="string">'file_name'</span>, <span class="string">'file_type'</span>)</span><br><span class="line"><span class="keyword">if</span> f:  <span class="comment"># 判断文件是否打开</span></span><br><span class="line">file_type</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'file_name'</span>, <span class="string">'file_type'</span>) <span class="keyword">as</span> f:</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>访问模式</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w: 只写</span><br><span class="line"></span><br><span class="line">r：只读</span><br><span class="line"></span><br><span class="line">a: 追加写入</span><br><span class="line">rb: 二进制只读</span><br><span class="line"></span><br><span class="line">wb：二进制写入</span><br><span class="line"></span><br><span class="line">ab：二进制追加写入</span><br><span class="line"></span><br><span class="line">r+：打开一个文件用于读写，文件指针将会放在文件的开头。</span><br><span class="line"></span><br><span class="line">w+：打开一个文件用于读写，如果文件已经存在则将其覆盖，如果文件不存在，则创建新文件。</span><br><span class="line"></span><br><span class="line">a+：打开一个文件用于读写，追加模式。如果文件存在，文件指针将会放在文件的结尾；如果该文件不存在，穿件新文件用于读写。</span><br><span class="line"></span><br><span class="line">rb+: 以二进制格式打开一个文件用于读写，文件指正将会放在文件的开头，一般用于非文本文件如图片等。</span><br><span class="line"></span><br><span class="line">wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件，一般用于非文本文件如图片等。</span><br><span class="line"></span><br><span class="line">ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾；如果文件不存在，创建新文件用于读写。</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>写文件</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.write(content)  <span class="comment"># 打开文件后，将制定内容写入文件中</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>读取文件</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read(lenth)  <span class="comment"># 使用read可以从文件中读取制定长度的数据，并将指针移到这条数据之后。如果为空，则默认读取全部数据。</span></span><br><span class="line"></span><br><span class="line">f.readline()  <span class="comment"># 读取文件中一行数据的信息，指针移动到下一行。</span></span><br><span class="line"></span><br><span class="line">f.readlines() <span class="comment"># 读取整个文件的数据信息，返回一个列表，列表中每个元素为一行数据信息。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看指针位置</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.tell()  <span class="comment"># 查看单签位置，就是指针对应的位置</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>指针定位</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seek(offset, <span class="keyword">from</span>)  <span class="comment"># 将指针定位到某个位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>: <span class="comment"># 方向，0表示文件开头；1表示文件当前位置；2表示文件的末尾</span></span><br><span class="line">offset: 偏移量</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">    f.seek(<span class="number">5</span>,<span class="number">0</span>)  <span class="comment"># 文件开头，向后偏移5个位置</span></span><br><span class="line">    f.seek(<span class="number">-3</span>,<span class="number">2</span>)  <span class="comment"># 文件结尾，向前偏移3个位置</span></span><br></pre></td></tr></table></figure>

<h2 id="9-new-和-init的区别"><a href="#9-new-和-init的区别" class="headerlink" title="9. new 和 init的区别"></a>9. <strong>new</strong> 和 <strong>init</strong>的区别</h2><ul>
<li><strong>new</strong>是一个静态方法，而<strong>init</strong>是一个实例方法</li>
<li><strong>new</strong>方法会返回一个创建的实例，而<strong>init</strong>什么都不返回</li>
<li>只有在<strong>new</strong>返回一个cls的实例时，后面的<strong>init</strong>才能被调用</li>
<li>创建一个新实例时调用<strong>new</strong>方法，初始化一个实例时调用<strong>init</strong>方法</li>
</ul>
<h2 id="10-python内存管理与垃圾回收机制"><a href="#10-python内存管理与垃圾回收机制" class="headerlink" title="10. python内存管理与垃圾回收机制"></a>10. python内存管理与垃圾回收机制</h2><p><strong><a href="https://blog.csdn.net/xiongchengluo1129/article/details/80462651" target="_blank" rel="noopener">Python垃圾回收机制详解</a></strong></p>
<blockquote>
<p>Python GC主要使用引用计数(reference counting)来跟踪和回收垃圾。在引用计数的基础上，通过标记清除机制(mark and sweep)解决容器对象可能产生的循环引用问题，通过分代回收(generation collection)策略，以以空间换时间的方法来提高垃圾回收的效率。</p>
</blockquote>
<ul>
<li>引用计数</li>
</ul>
<blockquote>
<p>引用计数法的原理是每个对象维护一个ob_ref，用来记录当前对象被引用的次数，也就是来追踪到底有多少引用指向了这个对象，当发生（对象被创建、对象被引用、对象被作为参数传到函数中、对象作为一个元素，存储在容器中）四种情况的时候，该对象的引用计数+1；当发生（该对象的别名被显示销毁时、该对象的引别名被赋予新的对象、一个对象离开它的作用域、该元素从容器中删除时或容器被销毁时），该对象的引用计数器-1。</p>
</blockquote>
<p><strong>简而言之，PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当有一个对象有心的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少。当引用计数为0时，该对象生命就结束了。</strong></p>
<p><strong>优点：</strong><br>① 高效<br>② 运行期没有停顿<br>③ 对象有确定的生命周期<br>④ 易于实现</p>
<p><strong>缺点：</strong><br>① 维护引用计数消耗资源，维护引用计数的次数和应用赋值成正比，而不像mark and sweep等基本与回收的内存数量有关。<br>② 无法解决循环引用的问题。</p>
<ul>
<li>标记清除机制(mark and sweep)</li>
</ul>
<blockquote>
<p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没有标记的对象释放。为了保证效率，Python只会在垃圾达到一定阈值时，垃圾回收才会启动。主要处理对象是一些容器对象，如list、dict、tuple、set、instance等，因为对于字符串、数值对象是不可能造成循环引用问题。</p>
</blockquote>
<p><strong>缺点：</strong><br>①清除非活动对象前必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>
<ul>
<li>分带回收策略</li>
</ul>
<blockquote>
<p>分代回收的整体思想是：将系统中所有的内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，python将内存等为3“代”，分别是年轻代(第0代)、中年代(第1代)、老年代(第2代)，它们对应的是三个链表，它们的垃圾回收集频率随着“代”的存活时间的增大而减小，新创建的对象都会分配在年轻代，年轻代链表总数达到上限时，python垃圾回收机制就回被触发，把那些可以被回收的对象回收，而那些不被回收的对象就会移到中年代去，以此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期，存活时间通常利用经过几次垃圾回收来度量。同时，分代回收是建立在标记清除技术基础之上。</p>
</blockquote>
<blockquote>
<p>Python默认定义三代对象集合，索引越大，对象存活时间越长。</p>
</blockquote>
<h2 id="11-python2-x-与python3-x的主要区别"><a href="#11-python2-x-与python3-x的主要区别" class="headerlink" title="11. python2.x 与python3.x的主要区别"></a>11. python2.x 与python3.x的主要区别</h2><p><strong><a href="https://www.pythonheidong.com/blog/article/22/" target="_blank" rel="noopener">比较详细</a></strong></p>
<ul>
<li><p>输入， py2中：raw_input(); py3中：input()</p>
</li>
<li><p>输出， py2中：print语句; py3中：print()函数</p>
</li>
<li><p>除法，py2中整数间进行’/‘和’//‘运算返回的是整数，而py3的’/‘运算返回的是浮点数</p>
</li>
<li><p>遍历范围，py2中：range()或xrange(); py3中：不等于，py2中：range</p>
</li>
<li><p>不等于，py2中：&lt;&gt;或!= ; py3中：!=</p>
</li>
<li><p>编码问题，py3默认使用unicode，字节是bytes；而py2中字节是str, 默认支持ascii编码，unicode需要在前面加u</p>
</li>
<li><p>异常，py2中：except exec, var ; py3中：except exec as var</p>
</li>
<li><p>八进制字面量，py2中：0o777或0777 ; py3中：0o777</p>
</li>
<li><p>去掉了repr表达式``，py2中：反引号相当于repr()的作用; py3中：去除反引号写法</p>
</li>
<li><p>多个模块变化</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>旧的名字</th>
<th>新的名字</th>
</tr>
</thead>
<tbody><tr>
<td>_winreg</td>
<td>winreg</td>
</tr>
<tr>
<td>ConfigParser</td>
<td>configparser</td>
</tr>
<tr>
<td>copy_reg</td>
<td>copyreg</td>
</tr>
<tr>
<td>Queue</td>
<td>queue</td>
</tr>
<tr>
<td>SocketServer</td>
<td>socketserver</td>
</tr>
<tr>
<td>repr</td>
<td>reprlib</td>
</tr>
</tbody></table>
<ul>
<li><p>数据类型，py3中去除long类型，只有int</p>
</li>
<li><p>rasie，py2中：raise IOError, “file error”; py3中：raise IOError(“file error”)</p>
</li>
<li><p>去除.next()，py2中：next(generator)和generator.next(); py3中：next(generator)</p>
</li>
<li><p>py3中for循环变量不会导致命名空间泄漏</p>
</li>
<li><p>py3中不能比较不可排序类型，需同类型比较</p>
</li>
<li><p>py3中range、zip、map、reduce、filter等返回的是可迭代对象，而不是列表</p>
</li>
<li><p>py3中新增asynico内置库，async/await原生协程支持异步编程</p>
</li>
<li><p>py3中移除cmp函数</p>
</li>
<li><p>py3中去除元组参数解包</p>
</li>
<li><p>增加了@abstractmethod和 @abstractproperty两个 decorator，编写抽象方法（属性）更加方便</p>
</li>
<li><p>移除了cPickle模块，可以使用pickle模块代替</p>
</li>
<li><p>移除了new模块</p>
</li>
<li><p>移除了 audiodev, Bastion, bsddb185, exceptions, linuxaudiodev, md5, MimeWriter, mimify, popen2,<br>rexec, sets, sha, stringold, strop, sunaudiodev, timing和xmllib模块</p>
</li>
<li><p>移除了imageop模块</p>
</li>
<li><p>迭代器的next()方法改名为<strong>next</strong>()，并增加内置函数next()，用以调用迭代器的<strong>next</strong>()方法</p>
</li>
</ul>
<h2 id="12-如何将python2的代码迁移到python3"><a href="#12-如何将python2的代码迁移到python3" class="headerlink" title="12. 如何将python2的代码迁移到python3"></a>12. 如何将python2的代码迁移到python3</h2><p><strong><a href="https://docs.python.org/zh-cn/3.9/howto/pyporting.html" target="_blank" rel="noopener">官方文档</a></strong></p>
<blockquote>
<p>第一步：使用自带的2to3.py文件，可以实现大部分代码从py2到py3的自动转换。命令：2to3 -w example.py</p>
</blockquote>
<blockquote>
<p>第二步：使用Pylint或者Pyflakes工具，检测代码错误。</p>
</blockquote>
<blockquote>
<p>第三步：检查模块和依赖库的变化。</p>
</blockquote>
<blockquote>
<p>第四步：人工修复被破坏的py2代码。</p>
</blockquote>
<p><strong>利用好<strong>future</strong>模块</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division  <span class="comment"># 在Python 2 中表现 Python 3.x 中的整除</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals  <span class="comment"># 适应Python 3.x的新的字符串的表示方法</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function  <span class="comment"># 使用打印功能</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> nested_scopes  <span class="comment"># 静态嵌套范围</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> generators  <span class="comment"># 简单生成器</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import  <span class="comment"># 绝对/相对导入</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement  <span class="comment"># with声明</span></span><br></pre></td></tr></table></figure>

<h2 id="13-python新式类和旧式类的区别"><a href="#13-python新式类和旧式类的区别" class="headerlink" title="13. python新式类和旧式类的区别"></a>13. python新式类和旧式类的区别</h2><blockquote>
<p>新式类是在创建的时候继承内置的object对象或者是内置类型如list、dict，而旧式类(经典类)是直接声明的，可以用dir()方法查看新式类中内置了很多性的属性和方法。</p>
</blockquote>
<blockquote>
<p>新式类遍历方法是广度优先，经典类是深度优先。</p>
</blockquote>
<h2 id="14-鸭子类型"><a href="#14-鸭子类型" class="headerlink" title="14. 鸭子类型"></a>14. 鸭子类型</h2><blockquote>
<p>编程语言中动态类型语言的一种设计风格，一个对象的特征不是由父类决定，而是通过对象的方法决定。类与类之间不用共同继承一个父类，只需要将它们做的像一件事物即可。</p>
</blockquote>
<blockquote>
<p>注重对象的行为，而非对象的类型，一个对象能都昨晚函数、表达是的参数，取决于其行为而非类型归属。</p>
</blockquote>
<h2 id="15-python自省"><a href="#15-python自省" class="headerlink" title="15. python自省"></a>15. python自省</h2><blockquote>
<p>在一些语言中也叫做反射，简单来说就是对象检查。面向对象的语言所写的程序在运行时，所能知道对象的类型。是什么(isinstance)，是什么类型(type)，有那些属性(hasattr)，有哪些变量方法(dir)，有哪些行为(hasattr)，getattr、setattr、delattr、callable。</p>
</blockquote>
<h2 id="16-猴子补丁技术"><a href="#16-猴子补丁技术" class="headerlink" title="16. 猴子补丁技术"></a>16. 猴子补丁技术</h2><blockquote>
<p>是一种让程序行为在运行时扩展或者变更的方法。</p>
</blockquote>
<blockquote>
<p>python充分利用动态语言的特性，在程序运行时动态改变类、模块、属性或方法，为的是将第三方代码打补丁在不按预期运行的bug或者feature上，gevent在这方面运用的比较多。</p>
</blockquote>
<h2 id="17-python语法糖有哪些"><a href="#17-python语法糖有哪些" class="headerlink" title="17. python语法糖有哪些"></a>17. python语法糖有哪些</h2><blockquote>
<p>在计算及科学中，语法糖是某种特殊的语法，对语言的功能没有影响，但对程序员来说，有更好的易用性，简洁性、可读性、方便性。比如索引切片、列表推导式、字典推导式、生成器推导式等等。</p>
</blockquote>
<ul>
<li>切片操作</li>
</ul>
<p><strong><a href="https://www.jianshu.com/p/15715d6f4dad" target="_blank" rel="noopener">Python切片操作详细例子</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'123456'</span></span><br><span class="line">s[:<span class="number">3</span>]  <span class="comment"># 结果为'123'，取索引索引小于3的值，或叫“取前3位”</span></span><br><span class="line">s[<span class="number">3</span>:]  <span class="comment"># 结果为'456', 取索引大于等于3的值，或叫“从第4位取到最后”</span></span><br><span class="line">s[<span class="number">2</span>:<span class="number">4</span>]  <span class="comment"># 结果为'34', 取索引大于等2，小于4的值，或叫“取第3位到第4位”</span></span><br><span class="line">s[:]  <span class="comment"># 结果为'123456', 取索引全部</span></span><br><span class="line">s[:<span class="number">-1</span>]  <span class="comment"># 结果为'654321' 取倒序</span></span><br><span class="line">s[::<span class="number">2</span>]  <span class="comment"># 结果为'135' 步长为2取值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>with打开文件</li>
</ul>
<blockquote>
<p>实现的是一个上下文管理器，它主要的特点就是帮助我们自动管理上下文的衔接。即在需要的时候传给我们，不需要的时候自动关闭上下文对象。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>else语法糖</li>
</ul>
<blockquote>
<p>for-else、while-else 需要和break语句配合使用。</p>
</blockquote>
<blockquote>
<p>try-else-finally</p>
</blockquote>
<ul>
<li><p>动态参数: (<em>args, *</em>kwargs)</p>
</li>
<li><p>匿名函数: lambda x: x * 2</p>
</li>
<li><p>推导表达式</p>
</li>
</ul>
<blockquote>
<p>列表推导表达式：[i for i in s if i%2 != 0]<br>生成器推导表达式： (i for i in s if i%2 != 0)<br>集合推导表达式：{i for i in s if i%2 != 0}<br>字典推导表达式：{i:i*2 for i in s if i%2 != 0}</p>
</blockquote>
<ul>
<li>yield表达式</li>
</ul>
<blockquote>
<p>yield是Python中实现<strong>协程(coroutine)</strong>的一个重要基础</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_generator</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">'''生成器'''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">yield</span> i*<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>装饰器</li>
</ul>
<blockquote>
<p>一种设计模式，本质上也是一种python函数，是一种闭包。装饰器需要返回一个对象，该对象可以是经过处理的原参数对象，一个包装且类似原参数的对象。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">'''装饰器'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>

<ul>
<li>map</li>
</ul>
<blockquote>
<p>map(function, iterable, …) 会根据提供的函数对指定序列做映射。function函数，iterable一个或多个序列，其中py2返回的列表，py3返回的是迭代器。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">map(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>], [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce</li>
</ul>
<blockquote>
<p>reduce(function, iterable[, initializer]) 函数会对参数序列中元素进行累积。function 有两个参数, iterable可迭代对象，initializer可选，初始参数。用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">reduce(add, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>filter</li>
</ul>
<blockquote>
<p>filter(function, iterable) 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。function判断函数，iterable可迭代对象，该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">newlist = filter(odd, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">print(list(newlist))</span><br></pre></td></tr></table></figure>

<h2 id="18-迭代器和生成器"><a href="#18-迭代器和生成器" class="headerlink" title="18. 迭代器和生成器"></a>18. 迭代器和生成器</h2><blockquote>
<p>迭代器是一个更抽象的概念，任何对象，如果它的类有next方法和iter方法返回自己本身。对于string、list、dict、tuple等这类容器对象，使用for循环遍历是很方便的。在后台for语句对容器对象调用iter()函数，iter()是python的内置函数。iter()会返回一个定义了next()方法的迭代器对象，它在容器中逐个访问容器内元素，next()也是python的内置函数。在没有后续元素时，next()会抛出一个StopIteration异常。</p>
</blockquote>
<blockquote>
<p>生成器(Generator)是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数，只是在需要返回数据的时候使用yield语句，生成器使用yield语句返回一个值，yield语句挂起该生成器函数的状态，保留足够的信息，以便之后从它离开的地方继续执行。每次next()被调用时，生成器会返回它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）。生成器需要注意：只能遍历一次。</p>
</blockquote>
<blockquote>
<p>区别：生成器能做到迭代器能做的所有事，而且因为自动创建了<strong>iter</strong>()和next()方法，生成器显得特别简洁，而且生成器也是高效的，使用生成器表达式取代列表解析可以同时节省内存。除了创建和保存程序状态的自动方法，当发生器终结时，还会自动抛出StopIteration异常。</p>
</blockquote>
<h2 id="19-闭包"><a href="#19-闭包" class="headerlink" title="19. 闭包"></a>19. 闭包</h2><blockquote>
<p>闭包(closure)是函数式编程的重要的语法结构，也是一种组织代码的结构，提高了代码的复用性。简单说，外函数的内部定义了一个内函数，内部函数使用了外部函数的临时变量，并外函数的返回值是内函数的引用。产生闭包需满足的条件：</p>
</blockquote>
<ul>
<li>必须有一个内嵌函数</li>
<li>内嵌函数必须引用外部函数的变量</li>
<li>外部函数的返回值必须是内嵌函数</li>
</ul>
<blockquote>
<p>简单说，闭包就是根据不同的配置信息得到不同的结果，装饰器就是一种闭包，闭包有效的减少了函数所需定义的参数数目。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a*x +b</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line">line1 = line_conf(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">line2 = line_conf(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(line1(<span class="number">5</span>), line2(<span class="number">5</span>))  <span class="comment"># (6, 25)</span></span><br></pre></td></tr></table></figure>

<h2 id="20-装饰器"><a href="#20-装饰器" class="headerlink" title="20. 装饰器"></a>20. 装饰器</h2><blockquote>
<p><strong>以下是一些前人的总结参考：</strong></p>
</blockquote>
<p><strong><a href="https://blog.csdn.net/tryhardsilently/article/details/90767627" target="_blank" rel="noopener">python装饰器</a></strong></p>
<p><strong><a href="https://blog.csdn.net/yhy1271927580/article/details/72758577" target="_blank" rel="noopener">Python装饰器各种类型详解</a></strong></p>
<p><strong><a href="https://blog.csdn.net/five3/article/details/83447467" target="_blank" rel="noopener">Python各种类型装饰器详解说明</a></strong></p>
<p><strong><a href="https://blog.csdn.net/xiemanr/article/details/72510885" target="_blank" rel="noopener">python装饰器的4种类型</a></strong></p>
<p><strong><a href="https://blog.csdn.net/weixin_42134789/article/details/84635252?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase" target="_blank" rel="noopener">一文看懂Python系列之装饰器</a></strong></p>
<p><strong><a href="https://blog.csdn.net/u010358168/article/details/77773199?utm_medium=distribute.pc_relevant_right.none-task-blog-BlogCommendFromMachineLearnPai2-29.nonecase&depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-BlogCommendFromMachineLearnPai2-29.nonecase" target="_blank" rel="noopener">python装饰器简介</a></strong></p>
<blockquote>
<p>装饰器本质上是一个函数，可以让其他函数在不需要做任何代码处理的前提下增加额外的功能，装饰器的返回值也是一个函数对象(函数的引用)。它经常用于有切面需求的场景，比如：<strong>插入日志、性能测试、事务处理、缓存、权限校验等场景</strong>，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p>
</blockquote>
<ul>
<li><strong>装饰器自身为函数</strong></li>
</ul>
<p>(1). 被装饰的对象为函数，且不带参数  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"Hello inner"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且不带参数</span></span><br><span class="line"><span class="meta">@time_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"foo is running."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.__name__)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">inner</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">foo is running.</span></span><br><span class="line"><span class="string">方法foo用时:3.01444411277771秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在以上代码中，@time_decorator装饰器对foo函数进行了装饰，这是一个不带参数的装饰器，当python解释器执行到@time_decorator时，回去调用time_decorator函数，同时将被装饰的对象的函数名foo作为参数传入，这时time_decorator函数接受到一个参数(即方法名foo)，然后进入内嵌函数inner，计算开始时间，调用传进来的foo方法，再计算结束时间，打印函数foo的耗时，最后将结果用内部函数inner返回，其实就是一个闭包函数。</p>
</blockquote>
<blockquote>
<p>首先打印的是foo.<strong>name</strong>，这里是inner而不是foo，本质上是调用inner函数<br>其次打印的是inner的内容”Hello inner”，然后开始调用foo函数，打印”func1 is running.”<br>最后打印”方法foo用时:3.01444411277771秒”</p>
</blockquote>
<p>(2). 被装饰的对象为函数，且带参数  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果原函数有参数，那闭包函数必须保持参数个数一直，并且将参数传递给原方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(name)</span>:</span>  <span class="comment"># 如果被装饰的函数有形参，那么闭包函数必须有参数，且一致</span></span><br><span class="line">        print(<span class="string">"Hello inner"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(name)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数，且带参数</span></span><br><span class="line"><span class="meta">@time_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"hello "</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.__name__)</span><br><span class="line">foo(<span class="string">'lucy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">hello lucy</span></span><br><span class="line"><span class="string">方法foo用时:3.000863790512085秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当被装饰的函数，带参数时，需要在装饰器的闭包函数inner函数中添加一致的参数name，调用func对象时也需要加上一致的参数name，并且返回了以reurn inner形式返回闭包函数，具体调用过程看结果应该不难理解。</p>
</blockquote>
<blockquote>
<p>当然，如果被装饰函数存在多个参数时，这里使用了python中动态参数的概念，利用<code>(*args, **kwargs)</code>来接收可变参数和关键字参数，这样装饰器就可以支持任意的组合参数的函数了。装饰器修改如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># 接收可变参数和关键字参数</span></span><br><span class="line">        print(<span class="string">"Hello inner"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数，且带参数</span></span><br><span class="line"><span class="meta">@time_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"hello "</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.__name__)</span><br><span class="line">foo(<span class="string">'lucy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">hello lucy</span></span><br><span class="line"><span class="string">方法foo用时:3.000807762145996秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>(3). 被装饰的对象为函数，且带返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"Hello inner"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且带返回值</span></span><br><span class="line"><span class="meta">@time_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"foo is running."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is foo's return value"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.__name__)</span><br><span class="line">res = foo()</span><br><span class="line">print(<span class="string">'返回值：%s'</span> % res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">foo is running.</span></span><br><span class="line"><span class="string">方法foo用时:3.000837802886963秒</span></span><br><span class="line"><span class="string">返回值：this is foo's return value</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若被装饰的函数是带返回值的，闭包函数inner中，调用func()时必须相应的带返回值，不然装饰函数时，也不进行返回，默认为None。</p>
</blockquote>
<p>(4). 被装饰的对象为函数，且装饰器带参数也有返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且带参数带返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_decorator</span><span class="params">(arg=None)</span>:</span>  <span class="comment"># 如果在调用装饰器时为给传参数，则默认值为None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"Hello inner"</span>)</span><br><span class="line">            print(<span class="string">"装饰器的参数为：&#123;&#125;"</span>.format(arg))</span><br><span class="line">            start = time.time()</span><br><span class="line">            res = func(*args,**kwargs)</span><br><span class="line">            end = time.time()</span><br><span class="line">            print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且不定参数</span></span><br><span class="line"><span class="meta">@time_decorator('hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"foo is running."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is foo's return value"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.__name__)</span><br><span class="line">res = foo()</span><br><span class="line">print(<span class="string">'返回值：%s'</span> % res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">装饰器的参数为：hello</span></span><br><span class="line"><span class="string">foo is running.</span></span><br><span class="line"><span class="string">方法foo用时:3.000739336013794秒</span></span><br><span class="line"><span class="string">返回值：this is foo's return value</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>带有参数的装饰器，需要写三层嵌套函数，最外一层用来传递装饰器的参数。上面的装饰器即带参数也带返回值，先执行time_decorator(‘hello’)，返回wrapper函数的应用，然后使用wrapper对函数foo进行装饰，内层inner使用的是<code>*args,**kwargs</code>接收可变参数和关键字参数，具体运行顺序看结果应该不难理解。</p>
</blockquote>
<p>(5). 被装饰的对象为类，且不带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="comment"># 在装饰器中声明一个变量，用于保存类的实例，那么这个实例对象将始终是通过一个实例对象</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'Hello inner'</span>)</span><br><span class="line">        print(<span class="string">'class name: &#123;&#125;'</span>.format(cls.__name__))</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls()</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象是类，且不带参数</span></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'lucy'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(Foo.__name__)</span><br><span class="line">foo = Foo()</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">class name: Foo</span></span><br><span class="line"><span class="string">her name is lucy</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的例子是基于装饰器的单例模式，通过装饰器装饰这个类，是的类在初始化时候始终将初始化实例赋值给instances，而instances是装饰器的一个实例对象，通过实例赋值，instances始终占有同一个内存空间，也就实现了单例模式设计。</p>
</blockquote>
<blockquote>
<p>当然，如果用这个装饰器对类里面方法say进行装饰的话，此时装饰器single接收到的参数cls=say，所以打印”class name”是say，因为cls__name__就是say，这里等同于函数装饰器给函数进行装饰，于是装饰器的内层函数inner需要接受say带来的参数name，不加参数则会报错，其他与前面一样。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="comment"># 在装饰器中声明一个变量，用于保存类的实例，那么这个实例对象将始终是通过一个实例对象</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(name)</span>:</span>  <span class="comment"># 必须和所修饰类里面的函数参数个数一致，否则会报错</span></span><br><span class="line">        print(<span class="string">'Hello inner'</span>)</span><br><span class="line">        print(<span class="string">'class name: &#123;&#125;'</span>.format(cls.__name__))</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(name)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象是类中的函数，调用类中的初始化参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'lucy'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(Foo.__name__)</span><br><span class="line">foo = Foo()</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">class name: say</span></span><br><span class="line"><span class="string">her name is lucy</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>(6). 被装饰的对象为类，且带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且不带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="comment"># 在装饰器中声明一个变量，用于保存类的实例，那么这个实例对象将始终是通过一个实例对象</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Hello inner'</span>)</span><br><span class="line">        print(<span class="string">'class name: &#123;&#125;'</span>.format(cls.__name__))</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象是类，且带参数</span></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.id = args[<span class="number">0</span>]</span><br><span class="line">        self.name = kwargs.get(<span class="string">'name_dict'</span>).get(self.id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(Foo.__name__)</span><br><span class="line">foo = Foo(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, name_dict=&#123;<span class="string">'1'</span>: <span class="string">'Lucy'</span>, <span class="string">'2'</span>: <span class="string">'Linda'</span>, <span class="string">'3'</span>: <span class="string">'Mary'</span>&#125;)</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">class name: Foo</span></span><br><span class="line"><span class="string">her name is Lucy</span></span><br></pre></td></tr></table></figure>

<p>(7). 被装饰的对象为类，且装饰器带参数也有返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器为函数，且带参数带返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(arg=None)</span>:</span> <span class="comment"># 如果在调用装饰器时为给传参数，则默认值为None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="comment"># 在装饰器中声明一个变量，用于保存类的实例，那么这个实例对象将始终是通过一个实例对象</span></span><br><span class="line">        instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">        @wraps(cls)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'Hello inner'</span>)</span><br><span class="line">            print(<span class="string">"装饰器的参数为：&#123;&#125;"</span>.format(arg))</span><br><span class="line">            print(<span class="string">'class name: &#123;&#125;'</span>.format(cls.__name__))</span><br><span class="line">            <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">                instances[cls] = cls(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> instances[cls]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象是类，且带参数</span></span><br><span class="line"><span class="meta">@singleton('hello')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.id = args[<span class="number">0</span>]</span><br><span class="line">        self.name = kwargs.get(<span class="string">'name_dict'</span>).get(self.id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(Foo.__name__)</span><br><span class="line">foo = Foo(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, name_dict=&#123;<span class="string">'1'</span>: <span class="string">'Lucy'</span>, <span class="string">'2'</span>: <span class="string">'Linda'</span>, <span class="string">'3'</span>: <span class="string">'Mary'</span>&#125;)</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">装饰器的参数为：hello</span></span><br><span class="line"><span class="string">class name: Foo</span></span><br><span class="line"><span class="string">her name is Lucy</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里与（4）类似，都是带有参数的装饰器，且装饰器为函数，需要写三层嵌套函数，最外一层用来传递装饰器的参数。上面的装饰器即带参数也带返回值，先执行time_decorator(‘hello’)，返回wrapper函数的应用，然后使用wrapper对函数foo进行装饰，内层inner使用的是<code>*args,**kwargs</code>接收可变参数和关键字参数，具体运行顺序看结果应该不难理解。</p>
</blockquote>
<ul>
<li><strong>装饰器自身为类</strong></li>
</ul>
<blockquote>
<p>类装饰器本质上和函数装饰器原理、作用相同，都是为其它函数增加额外的功能。但是相比于函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器可以直接依靠类内部的<strong>call</strong>方法来实现，当使用 @ 形式将类装饰器附加到函数上时，就会调用类装饰器的<strong>call</strong>方法。而不需要向函数装饰器那样，在装饰器函数中定义嵌套函数，来实现装饰功能。</p>
</blockquote>
<p>(1). 被装饰的对象为函数，且不带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且不带参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化函数只会调用一次，当第二次装饰的时候，这一步就滤过了</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        print(<span class="string">'func name is &#123;&#125;'</span>.format(func.__name__))</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(self.func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = self.func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(self.func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且不带参数</span></span><br><span class="line"><span class="meta">@Decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"foo is running."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.func.__name__)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">func name is foo</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">装饰器中的功能：foo 睡眠3秒</span></span><br><span class="line"><span class="string">foo is running.</span></span><br><span class="line"><span class="string">方法foo用时:3.000671863555908秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>装饰器为类时，调用<strong>init</strong>方法创建实例、传递参数，并调用<strong>call</strong>方法实现对被装饰函数功能的添加。</p>
</blockquote>
<p>(2). 被装饰的对象为函数，且带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且不带参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化函数只会调用一次，当第二次装饰的时候，这一步就滤过了</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        print(<span class="string">'func name is &#123;&#125;'</span>.format(func.__name__))</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(self.func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = self.func(name)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(self.func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且带参数</span></span><br><span class="line"><span class="meta">@Decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"hello "</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.func.__name__)</span><br><span class="line">foo(<span class="string">'lucy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">func name is foo</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">装饰器中的功能：foo 睡眠3秒</span></span><br><span class="line"><span class="string">hello lucy</span></span><br><span class="line"><span class="string">方法foo用时:3.0009634494781494秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当被装饰的函数，且带参数时，需要在装饰器类的<strong>call</strong>中添加一致的参数name，调用func对象时也需要加上一致的参数name，并且返回了以reurn inner形式返回闭包函数，具体调用过程看结果应该不难理解。</p>
</blockquote>
<blockquote>
<p>当然，如果被装饰函数存在多个参数时，这里使用了python中动态参数的概念，利用<code>(*args, **kwargs)</code>来接收可变参数和关键字参数，这样装饰器就可以支持任意的组合参数的函数了。装饰器修改如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且不带参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化函数只会调用一次，当第二次装饰的时候，这一步就滤过了</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        print(<span class="string">'func name is &#123;&#125;'</span>.format(func.__name__))</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(self.func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = self.func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(self.func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且带参数</span></span><br><span class="line"><span class="meta">@Decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"hello "</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.func.__name__)</span><br><span class="line">foo(<span class="string">'lucy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">func name is foo</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">装饰器中的功能：foo 睡眠3秒</span></span><br><span class="line"><span class="string">hello lucy</span></span><br><span class="line"><span class="string">方法foo用时:3.000622510910034秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>(3). 被装饰的对象为函数，且带返回值  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且不带参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化函数只会调用一次，当第二次装饰的时候，这一步就滤过了</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        print(<span class="string">'func name is &#123;&#125;'</span>.format(func.__name__))</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(self.func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = self.func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(self.func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且带返回值</span></span><br><span class="line"><span class="meta">@Decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"foo is running."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is foo's return value"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.func.__name__)</span><br><span class="line">res = foo()</span><br><span class="line">print(<span class="string">'返回值：%s'</span> % res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">func name is foo</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">装饰器中的功能：foo 睡眠3秒</span></span><br><span class="line"><span class="string">foo is running.</span></span><br><span class="line"><span class="string">方法foo用时:3.0008039474487305秒</span></span><br><span class="line"><span class="string">返回值：this is foo's return value</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>和之前装饰器是函数一样，若被装饰的函数是带返回值的，闭包函数inner中，调用func()时必须相应的带返回值，不然装饰函数时，也不进行返回，默认为None。</p>
</blockquote>
<p>(4). 被装饰的对象为函数，且装饰器带参数也有返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且带参数带返回值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg=None)</span>:</span>  <span class="comment"># 如果在调用装饰器时为给传参数，则默认值为None</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"Hello inner"</span>)</span><br><span class="line">            print(<span class="string">'装饰器的参数为：&#123;&#125;'</span>.format(self.arg))</span><br><span class="line">            print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(func.__name__))</span><br><span class="line">            start = time.time()</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            end = time.time()</span><br><span class="line">            print(<span class="string">'方法&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且不带参数</span></span><br><span class="line"><span class="meta">@Decorator('hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"foo is running."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is foo's return value"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">print(foo.__name__)</span><br><span class="line">res = foo()</span><br><span class="line">print(<span class="string">'返回值：%s'</span> % res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">装饰器的参数为：hello</span></span><br><span class="line"><span class="string">装饰器中的功能：foo 睡眠3秒</span></span><br><span class="line"><span class="string">foo is running.</span></span><br><span class="line"><span class="string">类foo用时:3.000250816345215秒</span></span><br><span class="line"><span class="string">返回值：this is foo's return value</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>和之前装饰器是函数一样，带有参数的装饰器类，会把被装饰函数所带的参数传递给装饰器<strong>init</strong>进行初始化，而<strong>call</strong>作为外层函数接收被装饰函数的函数名，作为参数传递给内层函数inner，这里需要注意的是func传入，不需要在前面加self了，其他的跟函数装饰函数很相似，可以通过结果去理解整个装饰器的运行过程。</p>
</blockquote>
<p>(5). 被装饰的对象为类，且不带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且不带参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化函数只会调用一次，当第二次装饰的时候，这一步就滤过了</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        print(<span class="string">'class name is &#123;&#125;'</span>.format(func.__name__))</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(self.func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = self.func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'类&#123;&#125;用时:&#123;&#125;秒'</span>.format(self.func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为函数，且不带参数</span></span><br><span class="line"><span class="meta">@Decorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'lucy'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(<span class="string">"类名：&#123;&#125;"</span>.format(Foo.func.__name__))</span><br><span class="line">foo = Foo()</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">func name is Foo</span></span><br><span class="line"><span class="string">类名：Foo</span></span><br><span class="line"><span class="string">装饰器中的功能：Foo 睡眠3秒</span></span><br><span class="line"><span class="string">类Foo用时:0.0秒</span></span><br><span class="line"><span class="string">her name is lucy</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>跟函数装饰器装饰类一样，这里把类Foo通过@Decorator类装饰器传递给参数func，但这个类装饰器没有<strong>get</strong>方法，无法返回装饰后的类，而是进行初始化。第二次调用，这时类Foo()就相当于调用了装饰器的<strong>call</strong>方法，在里面调用self.func()方法</p>
</blockquote>
<p>(6). 被装饰的对象为类，且带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且不带参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化函数只会调用一次，当第二次装饰的时候，这一步就滤过了</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        print(<span class="string">'class name is &#123;&#125;'</span>.format(func.__name__))</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(self.func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = self.func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'类&#123;&#125;用时:&#123;&#125;秒'</span>.format(self.func.__name__, end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为类，且带参数</span></span><br><span class="line"><span class="meta">@Decorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.id = args[<span class="number">0</span>]</span><br><span class="line">        self.name = kwargs.get(<span class="string">'name_dict'</span>).get(self.id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(<span class="string">"类名：&#123;&#125;"</span>.format(Foo.func.__name__))</span><br><span class="line">foo = Foo(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, name_dict=&#123;<span class="string">'1'</span>: <span class="string">'Lucy'</span>, <span class="string">'2'</span>: <span class="string">'Linda'</span>, <span class="string">'3'</span>: <span class="string">'Mary'</span>&#125;)</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">class name is Foo</span></span><br><span class="line"><span class="string">类名：Foo</span></span><br><span class="line"><span class="string">装饰器中的功能：Foo 睡眠3秒</span></span><br><span class="line"><span class="string">方法Foo用时:0.0秒</span></span><br><span class="line"><span class="string">her name is Lucy</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>(7). 被装饰的对象为类，且装饰器带参数也有返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是类，且带参数带返回值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg=None)</span>:</span>  <span class="comment"># 如果在调用装饰器时为给传参数，则默认值为None</span></span><br><span class="line">        print(<span class="string">'decorator init'</span>)</span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)  # 保证装饰过的函数__name__属性不变</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"Hello inner"</span>)</span><br><span class="line">            print(<span class="string">'装饰器的参数为：&#123;&#125;'</span>.format(self.arg))</span><br><span class="line">            print(<span class="string">'装饰器中的功能：&#123;&#125; 睡眠3秒'</span>.format(func.__name__))</span><br><span class="line">            start = time.time()</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            end = time.time()</span><br><span class="line">            print(<span class="string">'类&#123;&#125;用时:&#123;&#125;秒'</span>.format(func.__name__, end - start))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的对象为类，且带参数</span></span><br><span class="line"><span class="meta">@Decorator('hello')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.id = args[<span class="number">0</span>]</span><br><span class="line">        self.name = kwargs.get(<span class="string">'name_dict'</span>).get(self.id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"her name is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化装饰后的类</span></span><br><span class="line">print(<span class="string">"类名：&#123;&#125;"</span>.format(Foo.func.__name__))</span><br><span class="line">foo = Foo(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, name_dict=&#123;<span class="string">'1'</span>: <span class="string">'Lucy'</span>, <span class="string">'2'</span>: <span class="string">'Linda'</span>, <span class="string">'3'</span>: <span class="string">'Mary'</span>&#125;)</span><br><span class="line">foo.say()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">decorator init</span></span><br><span class="line"><span class="string">类名：Foo</span></span><br><span class="line"><span class="string">Hello inner</span></span><br><span class="line"><span class="string">装饰器的参数为：hello</span></span><br><span class="line"><span class="string">装饰器中的功能：Foo 睡眠3秒</span></span><br><span class="line"><span class="string">类Foo用时:0.0秒</span></span><br><span class="line"><span class="string">her name is Lucy</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>特殊的装饰器(类静态属性装饰器)</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类静态属性装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, height, weigth)</span>:</span></span><br><span class="line">        self.height = height</span><br><span class="line">        self.weigth = weigth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.height / self.weigth</span><br><span class="line"></span><br><span class="line">foo = Foo(<span class="number">176</span>, <span class="number">120</span>)</span><br><span class="line">print(foo.ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为：1.4666666666666666</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中，@property是一个特殊的装饰器，把ratio方法变成一个属性，所以调用的时候是foo.ratio而不是foo.ratio()。这类特殊装饰器需要python的特定的属性和机制的支持才可以实现，不同特性的装饰器所需机制不同。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现@property装饰器效果</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prop</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.arg(instance)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用效果与原生的@property装饰器的一样</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, height, weigth)</span>:</span></span><br><span class="line">        self.height = height</span><br><span class="line">        self.weigth = weigth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Prop</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.height / self.weigth</span><br><span class="line"></span><br><span class="line">foo = Foo(<span class="number">176</span>, <span class="number">120</span>)</span><br><span class="line">print(foo.ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为：1.4666666666666666</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>经典的装饰器装饰类，通过setattr魔术方法，对Person类进行修改，name作为类属性，<code>name = TypeCheck(name,required_type)</code>，这样修改了Person类，使得Person类有了两个类变量，一个是<code>name = TypeCheck(&#39;name&#39;, required_type)</code>，另一个是<code>age = TypeCheck(&#39;age&#39;, required_type)</code>。</p>
</blockquote>
<blockquote>
<p>因此实例化时<code>Person(&#39;lucy&#39;, 18)</code>，self.name中name不是实例变量而是类变量，会调用描述器TypeCheck，赋值的时候，就会调用<strong>set</strong>方法，取值的时候会调用<strong>get</strong>方法。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经典的装饰器装饰类</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeCheck</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, srcType, dstType)</span>:</span></span><br><span class="line">        self.srcType = srcType</span><br><span class="line">        self.dstType = dstType</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instance == a, cls == A</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.srcType]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, self, dstType):</span><br><span class="line">            instance.__dict__[self.srcType] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'&#123;&#125; should be &#123;&#125;'</span>.format(value, self.dstType))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器自身是一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">type_assert</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wraps</span><span class="params">(*args)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> name, required_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">                setattr(cls, name, TypeCheck(name, required_type))</span><br><span class="line">            <span class="keyword">return</span> cls(*args)  <span class="comment"># 这里是实例化新的Person类后返回实例对象，也就是p</span></span><br><span class="line">        <span class="keyword">return</span> wraps</span><br><span class="line">    <span class="keyword">return</span> dec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰对象是一个类，且带参数</span></span><br><span class="line"><span class="meta">@type_assert(name=str, age=int)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化新的Person类，这里相对于调用的是wraps函数</span></span><br><span class="line">p = Person(<span class="string">'lucy'</span>, <span class="number">18</span>)</span><br><span class="line">print(p.name)</span><br><span class="line">print(p.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器修改后的Person类为下面这个新的Person类，因此实例化Person的时候，调用的是下面这个新的Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = TypeCheck(<span class="string">'name'</span>, str)</span><br><span class="line">    age = TypeCheck(<span class="string">'age'</span>, int)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name:str, age:int)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<ul>
<li>装饰器顺序</li>
</ul>
<blockquote>
<p>当有两个或两个以上装饰器装饰一个函数时，那么语法糖语句执行流程的顺序是从下往上（就近原则，靠近函数定义的先执行）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个装饰器wrapper1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"wapper1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner1"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;b&gt;'</span> + func() + <span class="string">'&lt;/b&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个装饰器wrapper2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"wapper2"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner2"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;i&gt;'</span> + func() + <span class="string">'&lt;/i&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个装饰器</span></span><br><span class="line"><span class="meta">@wrapper1</span></span><br><span class="line"><span class="meta">@wrapper2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"foo"</span>)</span><br><span class="line">    print(<span class="string">"end"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的foo函数</span></span><br><span class="line">res = foo()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">wapper2</span></span><br><span class="line"><span class="string">wapper1</span></span><br><span class="line"><span class="string">inner1</span></span><br><span class="line"><span class="string">inner2</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据结果，函数foo先用wapper2装饰器进行装饰，接着是用wrapper1再进行装饰，但是在调用过程中又是先执行第一个装饰器wrapper1，然后在执行第二个装饰器wrapper2。</p>
</blockquote>
<blockquote>
<p>具体分析其过程，就近原则先用第二个装饰器wrapper2进行装饰，@wrapper2等价于<code>foo = wrapper2(foo)</code>，此时括号内的foo即是函数名，而外部的foo实际指向的是wrapper2的inner。<br>@wrapper1等价于<code>foo = wrapper1(foo)</code>，此时括号内的foo指向的是<code>wrapper2.inner</code>，而外部的foo指向wrapper1的inner。</p>
</blockquote>
<blockquote>
<p>当执行到@wrapper1时要对下面的函数进行装饰，此时解释器继续往下走，发现并不是一个函数名，而又是一个装饰器，这时@wrapper1装饰器暂停执行，而接着执行接下来的装饰器@wrapper2，接着把foo函数名传入到装饰器wrapper2函数func，从而打印”wrapper2”，在wrapper2装饰完后，此时的foo指向wrapper2的inner函数地址，这是又返回来执行@wrapper1，接着把新的foo（即wrapper2.inner）传入wrapper装饰器函数中，因此打印”wrapper1”，在wrapper1装饰完后，此时的foo指向wrapper1的inner函数地址。</p>
</blockquote>
<blockquote>
<p>在调用foo函数的时候，根据上述分析，此时foo指向wrapper1的inner函数地址，故打印”inner1”，接下来调用func()的时候，实际上调用的是wrapper2.inner()函数，所以会打印”inner2”，而wrapper2.inner()函数中，调用的func()才是最初传入的foo函数，所以打印”foo”和”end”，最后一层层调用完后打印的”<code>&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;</code>“。</p>
</blockquote>
<ul>
<li>通用万能装饰</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_all</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"万能装饰器"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<h2 id="21-浅拷贝与深拷贝"><a href="#21-浅拷贝与深拷贝" class="headerlink" title="21. 浅拷贝与深拷贝"></a>21. 浅拷贝与深拷贝</h2><h2 id="22-设计模式"><a href="#22-设计模式" class="headerlink" title="22. 设计模式"></a>22. 设计模式</h2><ul>
<li>工厂模式</li>
<li>构造模式</li>
<li>原型模式</li>
<li>单例模式</li>
<li>装饰器模式</li>
<li>代理模式</li>
<li>适配器模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>MVC模式</li>
<li>惰性计算模式</li>
<li>迭代器模式</li>
<li>观察者模式</li>
<li>策略模式</li>
</ul>
<h2 id="23-GIL全局解释器锁"><a href="#23-GIL全局解释器锁" class="headerlink" title="23. GIL全局解释器锁"></a>23. GIL全局解释器锁</h2><h2 id="24-python新式类和旧式类的区别"><a href="#24-python新式类和旧式类的区别" class="headerlink" title="24. python新式类和旧式类的区别"></a>24. python新式类和旧式类的区别</h2><h2 id="25-函数与方法的区别"><a href="#25-函数与方法的区别" class="headerlink" title="25. 函数与方法的区别"></a>25. 函数与方法的区别</h2><h2 id="26-range与Xrange的区别"><a href="#26-range与Xrange的区别" class="headerlink" title="26. range与Xrange的区别"></a>26. range与Xrange的区别</h2><h2 id="27-search与match的区别"><a href="#27-search与match的区别" class="headerlink" title="27. search与match的区别"></a>27. search与match的区别</h2><h2 id="28-继承"><a href="#28-继承" class="headerlink" title="28. 继承"></a>28. 继承</h2><h2 id="29-多态与多态性"><a href="#29-多态与多态性" class="headerlink" title="29. 多态与多态性"></a>29. 多态与多态性</h2><h2 id="30-Numpy与Scipy的区别"><a href="#30-Numpy与Scipy的区别" class="headerlink" title="30. Numpy与Scipy的区别"></a>30. Numpy与Scipy的区别</h2><h2 id="31-函数式编程"><a href="#31-函数式编程" class="headerlink" title="31. 函数式编程"></a>31. 函数式编程</h2><h2 id="32-面向对象编程OOP"><a href="#32-面向对象编程OOP" class="headerlink" title="32. 面向对象编程OOP"></a>32. 面向对象编程OOP</h2><h2 id="33-面向切面编程AOP"><a href="#33-面向切面编程AOP" class="headerlink" title="33. 面向切面编程AOP"></a>33. 面向切面编程AOP</h2><h2 id="34-元编程"><a href="#34-元编程" class="headerlink" title="34. 元编程"></a>34. 元编程</h2><blockquote>
<p>元编程是一种可以将程序当作数据来操作的技术，元编程能够读取，生成，分析或转换其他的程序代码，甚至可以在运行时修改自身 。</p>
</blockquote>
<h2 id="35-捕获异常"><a href="#35-捕获异常" class="headerlink" title="35. 捕获异常"></a>35. 捕获异常</h2><h2 id="36-python中如何进行异常处理，如何自定义一个异常类"><a href="#36-python中如何进行异常处理，如何自定义一个异常类" class="headerlink" title="36. python中如何进行异常处理，如何自定义一个异常类"></a>36. python中如何进行异常处理，如何自定义一个异常类</h2><h2 id="37-python内置数据结构"><a href="#37-python内置数据结构" class="headerlink" title="37. python内置数据结构"></a>37. python内置数据结构</h2><h2 id="38-python中函数和方法有什么区别"><a href="#38-python中函数和方法有什么区别" class="headerlink" title="38. python中函数和方法有什么区别"></a>38. python中函数和方法有什么区别</h2><h2 id="39-python中参数类型有哪些"><a href="#39-python中参数类型有哪些" class="headerlink" title="39. python中参数类型有哪些"></a>39. python中参数类型有哪些</h2><h2 id="40-python中函数传参过程"><a href="#40-python中函数传参过程" class="headerlink" title="40. python中函数传参过程"></a>40. python中函数传参过程</h2><h2 id="41-args和-kwargs"><a href="#41-args和-kwargs" class="headerlink" title="41. args和*kwargs"></a>41. <em>args和*</em>kwargs</h2><h2 id="42-实参和形参的区别"><a href="#42-实参和形参的区别" class="headerlink" title="42. 实参和形参的区别"></a>42. 实参和形参的区别</h2><h2 id="43-python中可变对象和不可变对象"><a href="#43-python中可变对象和不可变对象" class="headerlink" title="43. python中可变对象和不可变对象"></a>43. python中可变对象和不可变对象</h2><h2 id="44-lambda函数"><a href="#44-lambda函数" class="headerlink" title="44. lambda函数"></a>44. lambda函数</h2><h2 id="45-python中正则使用方式"><a href="#45-python中正则使用方式" class="headerlink" title="45. python中正则使用方式"></a>45. python中正则使用方式</h2><blockquote>
<p>手写正则邮箱地址</p>
</blockquote>
<h2 id="46-python中重载"><a href="#46-python中重载" class="headerlink" title="46. python中重载"></a>46. python中重载</h2><h2 id="47-python中反射机制"><a href="#47-python中反射机制" class="headerlink" title="47. python中反射机制"></a>47. python中反射机制</h2><h2 id="48-python中如何管理依赖"><a href="#48-python中如何管理依赖" class="headerlink" title="48. python中如何管理依赖"></a>48. python中如何管理依赖</h2><blockquote>
<p>每个项目创建独立的虚拟环境</p>
</blockquote>
<h2 id="49-如何分析python代码性能"><a href="#49-如何分析python代码性能" class="headerlink" title="49. 如何分析python代码性能"></a>49. 如何分析python代码性能</h2><h2 id="50-列表的线性访问和随机访问"><a href="#50-列表的线性访问和随机访问" class="headerlink" title="50. 列表的线性访问和随机访问"></a>50. 列表的线性访问和随机访问</h2><blockquote>
<p>random.random()用于生成一个0到1的随机符点数: 0 &lt;= n &lt; 1.0 。</p>
</blockquote>
<blockquote>
<p>random.uniform(a, b)，用于生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限。如果a &gt; b，则生成的随机数n: a &lt;= n &lt;= b。如果 a &lt;b， 则 b &lt;= n &lt;= a 。</p>
</blockquote>
<blockquote>
<p>random.randint(a, b)，用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a &lt;= n &lt;= b。</p>
</blockquote>
<blockquote>
<p>random.randrange([start], stop[, step])，从指定范围内，按指定基数递增的集合中 获取一个随机数。</p>
</blockquote>
<blockquote>
<p>random.choice(sequence)从序列中获取一个随机元素，参数sequence表示一个有序类型。</p>
</blockquote>
<blockquote>
<p>random.shuffle(x[, random])，用于将一个列表中的元素打乱。</p>
</blockquote>
<blockquote>
<p>random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列。</p>
</blockquote>
<h2 id="51-python中的高阶函数"><a href="#51-python中的高阶函数" class="headerlink" title="51. python中的高阶函数"></a>51. python中的高阶函数</h2><blockquote>
<p>高阶函数：一个函数可以作为参数传给另外一个函数，或者一个函数的返回值为另外一个函数（若返回值为该函数本身，则为递归），满足其一则为高阶函数。</p>
</blockquote>
<ul>
<li><p>map</p>
</li>
<li><p>filter</p>
</li>
<li><p>reduce</p>
</li>
<li><p>sorted</p>
</li>
</ul>
<blockquote>
<p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p>
</blockquote>
<ul>
<li>abs </li>
</ul>
<h2 id="52-Python中单下划线和双下划线"><a href="#52-Python中单下划线和双下划线" class="headerlink" title="52. Python中单下划线和双下划线"></a>52. Python中单下划线和双下划线</h2><h2 id="53-Python的作用域以及Python搜索变量的顺序"><a href="#53-Python的作用域以及Python搜索变量的顺序" class="headerlink" title="53. Python的作用域以及Python搜索变量的顺序"></a>53. Python的作用域以及Python搜索变量的顺序</h2><blockquote>
<p>Python作用域简单说就是一个变量的命名空间。代码中变量被赋值的位置，就决定了哪些范围的对象可以访问这个变量，这个范围就是变量的作用域。<br>在Python中，只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域。<br>Python的变量名解析机制也称为 LEGB 法则：本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）</p>
</blockquote>
<h2 id="54-编码与解码"><a href="#54-编码与解码" class="headerlink" title="54. 编码与解码"></a>54. 编码与解码</h2><blockquote>
<p>编码：gbk =&gt; unicode =&gt; utf16 =&gt; url解码</p>
</blockquote>
<blockquote>
<p>解码：url解码 =&gt; utf16 =&gt;unicode =&gt; gbk</p>
</blockquote>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urllib.quote(line.decode(<span class="string">"gbk"</span>).encode(<span class="string">"utf-16"</span>))</span><br></pre></td></tr></table></figure>

<h2 id="55-字符串格式化"><a href="#55-字符串格式化" class="headerlink" title="55. 字符串格式化"></a>55. 字符串格式化</h2><h2 id="56-增量赋值"><a href="#56-增量赋值" class="headerlink" title="56. 增量赋值"></a>56. 增量赋值</h2><ul>
<li><p>x += 1</p>
</li>
<li><p>x *= 1</p>
</li>
<li><p>x = x + 1</p>
</li>
</ul>
<h2 id="57-字典推导式"><a href="#57-字典推导式" class="headerlink" title="57. 字典推导式"></a>57. 字典推导式</h2><h2 id="58-exec对字符串执行和eval对字符串求值"><a href="#58-exec对字符串执行和eval对字符串求值" class="headerlink" title="58. exec对字符串执行和eval对字符串求值"></a>58. exec对字符串执行和eval对字符串求值</h2><h2 id="59-raise语句的作用"><a href="#59-raise语句的作用" class="headerlink" title="59. raise语句的作用"></a>59. raise语句的作用</h2><h2 id="60-yeild语句的作用"><a href="#60-yeild语句的作用" class="headerlink" title="60. yeild语句的作用"></a>60. yeild语句的作用</h2><h2 id="61-socket编程"><a href="#61-socket编程" class="headerlink" title="61. socket编程"></a>61. socket编程</h2><h2 id="62-urllib和urllib2"><a href="#62-urllib和urllib2" class="headerlink" title="62. urllib和urllib2"></a>62. urllib和urllib2</h2><h2 id="63-requests"><a href="#63-requests" class="headerlink" title="63. requests"></a>63. requests</h2><h2 id="64-Beautiful-Soup"><a href="#64-Beautiful-Soup" class="headerlink" title="64. Beautiful Soup"></a>64. Beautiful Soup</h2><h2 id="65-select-poll和epoll"><a href="#65-select-poll和epoll" class="headerlink" title="65. select,poll和epoll"></a>65. select,poll和epoll</h2><h2 id="66-python中实现IO多路复用"><a href="#66-python中实现IO多路复用" class="headerlink" title="66. python中实现IO多路复用"></a>66. python中实现IO多路复用</h2><h2 id="67-python常用的并发网络库"><a href="#67-python常用的并发网络库" class="headerlink" title="67. python常用的并发网络库"></a>67. python常用的并发网络库</h2><ul>
<li>tornado</li>
<li>gevent</li>
<li>asyncio</li>
</ul>
]]></content>
      <categories>
        <category>编程语言-python</category>
      </categories>
      <tags>
        <tag>知识回顾</tag>
        <tag>python</tag>
        <tag>后端</tag>
      </tags>
  </entry>
</search>
